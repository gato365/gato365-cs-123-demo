[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Dr. Immanuel J. Williams",
    "section": "",
    "text": "1 Grand Avenue, San Luis Obispo, CA. 93407-0405\nEmail: imwillia@calpoly.edu\nPhone: (732) 207-7321\n\n\n\n\n\n\nPh.D. in Education\nFocus: Psychometrics & Statistics\nRutgers University, May 2017\nM.S. in Statistics\nFocus: Psychometrics\nRutgers University, January 2013\nB.S. in Mathematics\nFocus: Statistics\nThe University of Maryland, Baltimore County, May 2011\n\n\n\n\n\nVisiting Lecturer\nPurdue University 2023\nData Science\nLecturer\nCalifornia Polytechnic State University, 2018-Present\nCourses: Statistical Inference for Management I & II\nLecturer\nUniversity California Santa Cruz, 2017-2018\nCourses: Statistical Methods For The Biological, Environmental, And Health Sciences, Gambling, And Gaming, & The Art of Data Visualization\nLecturer\nCalifornia State University Monterey Bay, 2015-2017\nCourses: Pre-calculus, Calculus II, & Applied Statistics\n\n\n\n\n\nWeiland, T., & Williams, I. J. (2023). Culturally Relevant Data in Teaching Statistics and Data Science Courses. Journal of Statistics and Data Science Education, 1-16.\nSisso, D., Bass, N., & Williams, I. J. (2023). Teaching One‐Way ANOVA with engaging NBA data and R Shiny within a flexdashboard. Teaching Statistics.\nDeLiema D., Flood V. J., Dahn M., Williams I. J., Abrahamson D., Enyedy N., & Steen F. (2022). Debugging Failure: A Multi-dimensional Framework for Documenting Newcomers’ Experiences with Obstacles. Cognition and Instruction.\nLanger-Osuna J. M., Munson J., Gargroetzi E. C., Williams I. J., Chavez R. (2020). So What Are We"
  },
  {
    "objectID": "about.html#lecturer",
    "href": "about.html#lecturer",
    "title": "About Dr. Immanuel J. Williams",
    "section": "",
    "text": "1 Grand Avenue, San Luis Obispo, CA. 93407-0405\nEmail: imwillia@calpoly.edu\nPhone: (732) 207-7321"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About Dr. Immanuel J. Williams",
    "section": "",
    "text": "Ph.D. in Education\nFocus: Psychometrics & Statistics\nRutgers University, May 2017\nM.S. in Statistics\nFocus: Psychometrics\nRutgers University, January 2013\nB.S. in Mathematics\nFocus: Statistics\nThe University of Maryland, Baltimore County, May 2011"
  },
  {
    "objectID": "about.html#teaching-experience",
    "href": "about.html#teaching-experience",
    "title": "About Dr. Immanuel J. Williams",
    "section": "",
    "text": "Visiting Lecturer\nPurdue University 2023\nData Science\nLecturer\nCalifornia Polytechnic State University, 2018-Present\nCourses: Statistical Inference for Management I & II\nLecturer\nUniversity California Santa Cruz, 2017-2018\nCourses: Statistical Methods For The Biological, Environmental, And Health Sciences, Gambling, And Gaming, & The Art of Data Visualization\nLecturer\nCalifornia State University Monterey Bay, 2015-2017\nCourses: Pre-calculus, Calculus II, & Applied Statistics"
  },
  {
    "objectID": "about.html#publications",
    "href": "about.html#publications",
    "title": "About Dr. Immanuel J. Williams",
    "section": "",
    "text": "Weiland, T., & Williams, I. J. (2023). Culturally Relevant Data in Teaching Statistics and Data Science Courses. Journal of Statistics and Data Science Education, 1-16.\nSisso, D., Bass, N., & Williams, I. J. (2023). Teaching One‐Way ANOVA with engaging NBA data and R Shiny within a flexdashboard. Teaching Statistics.\nDeLiema D., Flood V. J., Dahn M., Williams I. J., Abrahamson D., Enyedy N., & Steen F. (2022). Debugging Failure: A Multi-dimensional Framework for Documenting Newcomers’ Experiences with Obstacles. Cognition and Instruction.\nLanger-Osuna J. M., Munson J., Gargroetzi E. C., Williams I. J., Chavez R. (2020). So What Are We"
  },
  {
    "objectID": "extract_transform.html",
    "href": "extract_transform.html",
    "title": "Data Extraction and Manipulation",
    "section": "",
    "text": "To facilitate the tasks you’ve outlined, we’ll use the spotifyr package in R. This package is a great tool for accessing Spotify’s Web API and can help us gather and manipulate data related to artists, albums, and tracks. Below, I’ll provide you with R code snippets for each of your tasks.\nBefore you begin, ensure that you have the spotifyr package installed and loaded, and that you have valid Spotify API credentials (Client ID and Client Secret). Replace \"xxxxxxxxxxxxxxxxxxxxx\" with your actual credentials."
  },
  {
    "objectID": "extract_transform.html#task-1-get-tracks-from-the-beatles-the-rolling-stones-and-the-monkees",
    "href": "extract_transform.html#task-1-get-tracks-from-the-beatles-the-rolling-stones-and-the-monkees",
    "title": "Data Extraction and Manipulation",
    "section": "Task 1: Get Tracks from The Beatles, The Rolling Stones, and The Monkees",
    "text": "Task 1: Get Tracks from The Beatles, The Rolling Stones, and The Monkees\n\n1. Load the spotifyr Library and Authenticate:\n\nlibrary(spotifyr)\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.2\n\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\n\nWarning: package 'purrr' was built under R version 4.3.1\n\n\nWarning: package 'lubridate' was built under R version 4.3.1\n\n\n\n# Load environment variables\nclient_id &lt;- Sys.getenv(\"SPOTIFY_CLIENT_ID\")\nclient_secret &lt;- Sys.getenv(\"SPOTIFY_CLIENT_SECRET\")\n\n# Authenticate using the loaded credentials\n# Authenticate using the credentials stored in environment variables\naccess_token &lt;- get_spotify_access_token()\n\n\n\n2. Get Data for Each Artist and Bind Rows:\n\nbeatles_tracks &lt;- get_artist_audio_features(\"The Beatles\")\nrolling_stones_tracks &lt;- get_artist_audio_features(\"The Rolling Stones\")\nmonkees_tracks &lt;- get_artist_audio_features(\"The Monkees\")\n\nall_tracks &lt;- bind_rows(beatles_tracks, rolling_stones_tracks, monkees_tracks)\n\n\n\n3. Filter Out Duplicates and Irrelevant Data:\nHere, you’ll need to decide what constitutes an irrelevant track. For simplicity, I’m removing duplicates based on track IDs.\n\nall_tracks_cleaned &lt;- all_tracks %&gt;% \ndistinct(track_id, .keep_all = TRUE)"
  },
  {
    "objectID": "extract_transform.html#task-2-aggregate-information-based-on-album-and-artist",
    "href": "extract_transform.html#task-2-aggregate-information-based-on-album-and-artist",
    "title": "Data Extraction and Manipulation",
    "section": "Task 2: Aggregate Information Based on Album and Artist",
    "text": "Task 2: Aggregate Information Based on Album and Artist\n\n1. Group by Album and Artist:\nAggregate data to get Energy, Valence, Number of Songs per Album, and Album Year.\n\nalbum_info &lt;- all_tracks_cleaned %&gt;% \ngroup_by(artist_name, album_name, album_release_year) %&gt;%\nsummarise(Energy = mean(energy),\nValence = mean(valence),\nNumber_of_Songs = n(),\n.groups = 'drop')\n\n\n\n2. Create an Overall DataFrame for Each Artist:\nThis DataFrame will show the number of songs, number of albums, and other noteworthy variables for each artist.\n\nartist_overview &lt;- all_tracks_cleaned %&gt;% \ngroup_by(artist_name) %&gt;%\nsummarise(Number_of_Songs = n(),\nNumber_of_Albums = n_distinct(album_name),\nAverage_Energy = mean(energy),\nAverage_Valence = mean(valence),\n.groups = 'drop')\n\nPlease note that this code is a general guide. The exact specifications, like what constitutes a duplicate or irrelevant track, may need to be adjusted based on your specific requirements and the structure of the data returned by the Spotify API. Additionally, be aware of any rate limits or restrictions imposed by the Spotify API."
  },
  {
    "objectID": "index-01162024.html",
    "href": "index-01162024.html",
    "title": "CS 123 Teaching Demonstration",
    "section": "",
    "text": "Review of the Extract-Transform (E-T) Process\n\n\n\n\n\nHow did we get this data?\n\nOverview: We extracted data using the Spotify API and transformed it using various dplyr functions. Link to Extraction and Transformation Process. Additionally, here’s a reference to research presented at a conference of Extraction Transformation Visualization (ETV) a teaching data science technique.\nIllustration with Data:\nBind Rows: Combining all_tracks_df. See this section of the notes for more details.\nFilter Function: Filtering data in all_tracks_cleaned_df. Refer to this section of the notes for additional information.\nGroup By and Summarize: Demonstrating these processes with album_info_df and artist_overview_df. Further details can be found in this section of the notes.\n\nWe are going to load the data from our previous work with following code:\n\n# Load the data from the R data file\nload(\"music_data.rda\")\n\n\n\n\n\n\n\n\n\n\n0. Lets Visualize using ggplot\n\n\n\n\n\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\n\n\nggplot(data = all_tracks_cleaned_df)\n\n\n\n\n\nThe ggplot2 package in R is a powerful and flexible system for creating data visualizations.\nBuilt upon the principles of the Grammar of Graphics, it allows users to construct plots by layering components systematically.\nggplot2 is renowned for its ability to handle complex visualization tasks with ease, offering a wide range of plot types and customization options.\n\n\n\n\n\n\n\n\n\n\n1. Understanding geoms\n\n\n\n\n\nDefinition: geoms (geometric objects) are the visual representations of data in ggplot2. Examples include points, lines, and bars.\nIllustration with Data:\n\n\n\n\n\n\nInvestigating Count Data - geom_bar\n\n\n\n\n\nWhich group had the most albums?\nType of Data: One or more categorical variables (e.g., “Artist”)\nWe’ll create a bar plot using geom_bar() with the artist_overview_df data frame to visualize the count of albums by each artist group.\n\n# Bar plot to show the number of albums per artist\nggplot(artist_overview_df, aes(x = artist_name, y = Number_of_Albums)) +\n  geom_bar(stat = 'identity') \n\n\n\n\nThis visualization will help us see which artist group released the most albums.\n\n\n\n\n\n\n\n\n\nInvestigating the Distribution - geom_violin\n\n\n\n\n\nWhat were the energy levels of each group?\nType of Data: One categorical variable (Artist) and one numeric variable (Energy)\nUsing geom_violin() with the all_tracks_cleaned_df, we’ll create a violin plot to visualize the distribution of energy levels across different artist groups.\n\n# Violin plot to show the distribution of energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin() +\n  theme_minimal() +\n  labs(title = \"Distribution of Energy Levels by Artist\",\n       x = \"Artist\",\n       y = \"Energy Level\")\n\n\n\n\nA violin plot is chosen here because it not only shows the distribution but also the density of the data points, giving a clearer picture than a boxplot.\n\n\n\n\n\n\n\n\n\nInvestigating a Relationship - geom_point\n\n\n\n\n\nWhat is the relationship between energy levels and valence across groups?\nFirst, we’ll create a scatter plot using geom_point() with album_info_df to explore the relationship between energy levels and valence without specifying artists.\n\n# Scatter plot for energy levels vs valence\nggplot(album_info_df, aes(x = Energy, y = Valence)) +\n  geom_point() +\n  theme_minimal() +\n  labs(title = \"Relationship Between Energy Levels and Valence\",\n       x = \"Energy\",\n       y = \"Valence\")\n\n\n\n\nYou can investigate more geoms here.\n\n\n\n\n\n\n\n\n\nIn Class Practice\n\n\n\n\n\nTurn this into a question in which the student is asked to use color = artist_name ““” Next, we’ll add the artist specification to the plot for a more detailed analysis.\n\n# Scatter plot with artist specification\nggplot(album_info_df, aes(x = Energy, y = Valence, color = artist_name)) +\n  geom_point() +\n  theme_minimal() +\n  labs(title = \"Energy Levels vs Valence by Artist\",\n       x = \"Energy\",\n       y = \"Valence\")\n\n\n\n\nThis approach allows us to first observe the general trend and then delve deeper into how this relationship might differ across different artist groups.\n\n\n\n\n\n\n\n\n\n\n\n\n2. Exploring Stats within ggplot\n\n\n\n\n\n\nDefinition: In ggplot2, Stats (statistical transformations) are fundamental components that transform and summarize data.\nThese transformations include basic tasks like counting occurrences, to more complex operations like calculating means or medians, making them crucial for data analysis and interpretation.\nIllustration with Data:\nWe will use stat_summary() in conjunction with geom_violin() to enhance our violin plot. By applying stat_summary(), we can overlay summary statistics, such as mean or median, on the violin plot created from all_tracks_cleaned_df.\nThis approach not only visualizes the distribution of energy levels across different artist groups but also marks key statistical indicators for more insightful data interpretation.\n\n\n# Enhanced Violin plot with summary statistics for energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin() +\n  stat_summary(fun = mean, geom = \"point\", shape = 20, size = 3, color = \"black\") +\n  theme_minimal() +\n  labs(title = \"Distribution of Energy Levels by Artist with Statistical Summary\",\n       x = \"Artist\",\n       y = \"Energy Level\")\n\n\n\n\n\nIn this code snippet, stat_summary() is used to plot the mean energy levels as points on the violin plot.\nThe mean function calculates the average energy level for each artist, and the resulting point is plotted on top of the corresponding violin plot.\nThis enhancement provides a clear visual indicator of the central tendency of the energy distribution for each artist, adding depth to our data analysis.\n\n\n\n\n\n\n\n\n\n\nIn Class Practice\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\n\nToday’s exploration of the ggplot2 package in R has taken us through the intricacies of geoms, Stats, and Guides. We’ve utilized all_tracks_cleaned_df, album_info_df, and artist_overview_df to demonstrate the creation of compelling visualizations, from basic bar charts to insightful violin and scatter plots.\n\ngeoms showed the diverse ways data can be visually represented.\nStats added a layer of depth by integrating statistical summaries.\n\nGuides enhanced our plots with clear legends and annotations, making them informative and accessible.\n\nThis session aimed to not only broaden your understanding of ggplot2 but also to inspire its application in your data storytelling endeavors. Thank you for your engagement, and I encourage you to continue exploring the vast potential of data visualization.\n\n\n\n\n\n\n\n\n\nNeed to clean\n\n\n\n\n\n\nQuestion 1: geoms\nPrompt: Using the mtcars dataset, create a ggplot2 scatter plot (geom_point) to visualize the relationship between mpg (miles per gallon) and hp (horsepower). Assign your plot to the variable p1.\nSolution:\n\np1 &lt;- ggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point()\n\n\n# grade_this_code()(\n#   pass_if(~ identical(.result, p1),\n#           \"Excellent work! Your scatter plot correctly visualizes the relationship between mpg and hp.\"),\n#   fail_if(~ !inherits(.result, \"ggplot\"),\n#           \"Make sure you are using ggplot2 for plotting.\"),\n#   fail(\"Your plot does not match the expected output. Check your aes() mappings.\")\n# )\n\n\n\n\nQuestion 2: stat_summary\nPrompt: Create a ggplot2 visualization using the mtcars dataset that displays the average mpg for each cylinder group (cyl). Use geom_bar() and stat_summary() to achieve this. Store your plot in the variable p2.\nSolution:\n\np2 &lt;- ggplot(mtcars, aes(x = factor(cyl))) +\n  geom_bar(stat = \"summary\", fun = mean)\n\ngradethis Code:\n\n# grade_this_code()(\n#   pass_if(~ identical(.result, p2),\n#           \"Well done! Your plot correctly shows the average mpg for each cylinder group.\"),\n#   fail_if(~ !(\"summary\" %in% sapply(.result$layers, function(x) x$stat)),\n#           \"Remember to use stat='summary' in geom_bar.\"),\n#   fail(\"Your plot doesn't seem to be correct. Ensure you're using the mean function for stat_summary.\")\n# )\n\n\n\nQuestion 3: Labels\nPrompt: Using the mtcars dataset, create a ggplot2 scatter plot of mpg vs wt (weight). Add labels for the x-axis (“Miles per Gallon”), y-axis (“Weight (1000 lbs)”), and the plot title (“MPG vs Weight”). Save this plot as p3.\nSolution:\n\np3 &lt;- ggplot(mtcars, aes(x = mpg, y = wt)) +\n  geom_point() +\n  labs(title = \"MPG vs Weight\", x = \"Miles per Gallon\", y = \"Weight (1000 lbs)\")\n\ngradethis Code:\n\n# grade_this_code()(\n#   pass_if(~ identical(.result, p3),\n#           \"Great job! Your labels are correctly added to the scatter plot.\"),\n#   fail_if(~ any(c(\"Miles per Gallon\", \"Weight (1000 lbs)\", \"MPG vs Weight\") %in% c(.result$labels$title, .result$labels$x, .result$labels$y)),\n#           \"Check if you've added all the required labels correctly.\"),\n#   fail(\"There seems to be an issue with your plot. Review the labels and try again.\")\n# )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS 123 Teaching Demonstration",
    "section": "",
    "text": "Review of the Extract-Transform (E-T) Process\n\n\n\n\n\n\n\n\nWe extracted data using the Spotify API and transformed it using various dplyr functions. Link to Extraction and Transformation Process. Additionally, here’s a reference to research presented at a conference of Extraction Transformation Visualization (ETV) a teaching data science technique.\n\n\n\n\nBind Rows: Combining all_tracks_df. See this section of the notes for more details.\nFilter Function: Filtering data in all_tracks_cleaned_df. Refer to this section of the notes for additional information.\nGroup By and Summarize: Demonstrating these processes with album_info_df and artist_overview_df. Further details can be found in this section of the notes.\n\nWe are going to load the data from our previous work with following code:\n\n# Load the data from the R data file\nload(\"music_data.rda\")\n\n\n\n\n\n\n\n\n\n\n\nIntroduction\n\n\n\n\n\nIn this module, we will explore how to create visualizations using the ggplot2 package in R.\nWe’ll focus on understanding:\n\ngeoms: the different types of geometric objects\nSummary Statistics: The stat_summary function can calculate summary statistics (like mean, median, min, max, etc.) for each group of data\nThe importance of labels in making plots informative.\n\n\n\n\n\n\n\n\n\n\n0. Lets Visualize using ggplot\n\n\n\n\n\n\nThe ggplot2 package in R is a powerful and flexible system for creating data visualizations.\nBuilt upon the principles of the Grammar of Graphics, it allows users to construct plots by layering components systematically.\nggplot2 is renowned for its ability to handle complex visualization tasks with ease, offering a wide range of plot types and customization options.\n\n\nlibrary(ggplot2)\n\n\nggplot(data = all_tracks_cleaned_df)\n\n\n\n\n\n\n\n\nNow that we have the data, we must specify the variable(s) that we are interested to create a visualization.\n\n\n\n\n\n\n\n\n\n1. Understanding Geoms\n\n\n\n\n\nDefinition: Geoms (geometric objects) are the visual representations of data in ggplot2. Examples include points, lines, and bars.\n\n\n\n\n\nTypically, I determine:\n\nWhat is/are variable(s) that are in your question.\nHow many variables are you investigating?\nWhat are the variable types? Strings or numeric.\n\nBased on this information we can then determine how we can represent that information in a visualization.\n\n\n\ngeoms, or geometric objects, are the fundamental visual representations of data in ggplot2.\nDepending on the type of data and the story we want to tell, we choose different geoms.\n\n\n\n\n\n\nInvestigating Count Data - geom_bar\n\n\n\n\n\n\nType of Data: One or more variables that are strings (e.g., “Artist”)\nWe’ll create a bar plot using geom_bar() with the artist_overview_df data frame to visualize the count of albums by each artist group.\n\n\n# Bar plot to show the number of albums per artist\nggplot(artist_overview_df, aes(x = artist_name, y = Number_of_Albums)) +\n  geom_bar(stat = 'identity') \n\n\n\n\nThis visualization will help us see which artist group released the most albums.\n\n\n\n\n\n\n\n\n\n\nInvestigating Numeric Data - geom_boxplot\n\n\n\n\n\n\n\nType of Data: One string variable (Artist) and one numeric variable (Energy)\nUsing geom_boxplot() with the all_tracks_cleaned_df, we’ll create a boxplot to visualize the distribution of energy levels across different artist groups.\n\n\n\n\n# Boxplot to show the distribution of energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_boxplot() \n\n\n\n\n\nThis visualization will help us see the median, IQR, and skewness of numeric data.\nYou can investigate more geoms here.\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\nConvert a boxplot to a violin plot using the geom_violin() function. [Code]\n\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin()\n\n\n\n\n\n\n\nWhat do you notice about the violin plot compared to the boxplot? [Multiple Choice]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. Exploring Stats within ggplot\n\n\n\n\n\n\nDefinition: In ggplot2, stats are key elements that help summarize and represent data. They allow us to visualize the central tendency or the most typical value in the data. One of the functions used for this purpose is stat_summary().\nWe will use stat_summary() in conjunction with geom_violin() to enhance our violin plot. By applying stat_summary(), we can overlay summary statistics, such as mean or median, on the violin plot created from all_tracks_cleaned_df.\nThis approach not only visualizes the distribution of energy levels across different artist groups but also marks key statistical indicators for more insightful data interpretation.\n\n\n\n\n# Enhanced Violin plot with summary statistics for energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin() +\n  stat_summary(fun = mean, geom = \"point\", shape = 20, size = 6, color = \"black\")\n\n\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\n\nComplete the code to overlay text on the bars using geom_text().[Code]\nHow many albums do The Monkees have? [Numeric]\n\n\n\n\nWhat are the advantages of displaying numerical values on each bar in a bar chart? [Multiple Answers]\n\n\n\n\n\n\n\n\n\n\n\n\n\n3. Guide: Legends and Annotations\n\n\n\n\n\n\nDefinition: In ggplot2, guides are critical elements that enhance the interpretability of a plot. They include legends, axes labels, titles, and other annotations, serving as navigational tools that provide context and improve readability.\nTo demonstrate the importance of guides, we will enhance a scatter plot created from album_info_df.\n\n\n\n\n# Example code for adding labels to a plot\nggplot(data = album_info_df , aes(x = Energy, y = Valence)) +\n  geom_point() +\n  labs(\n    title = \"Energy vs Valence: Exploring Album Characteristics\",\n    subtitle = \"A scatter plot illustrating the relationship between energy and valence in albums\",\n    x = \"Energy\",\n    y = \"Valence\"\n  )\n\n\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\nWe are creating a scatter plot with geom_point using the variables album_age and Number_of_Songs. Edit the code to include a title, axis labels, and a legend title that match the ones in the provided plot. Specifically, set the title to ‘Album Age vs Number of Songs: A Comparative Analysis’, the subtitle to ‘Scatter plot illustrating the correlation between album age and number of songs across artists’, the x-axis label to ‘Album Age (Years)’, the y-axis label to ‘Number of Songs’, and the color legend title to ‘Artist Name’. [Code]\n\n# Your code to add labels to a scatter plot goes here\nggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +\n  geom_point() +\n  labs(\n    title = \"Plot Title: Relationship Between X and Y\",\n    subtitle = \"Information about plot\",\n    x = \"X Variable Name\",\n    y = \"Y Variable Name\",\n    color = \"Legend Name\"\n  )\n\n\n\n\n\n# Your code to add labels to a scatter plot goes here\nggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +\n  geom_point() +\n  labs(\n    title = \"Album Age vs Number of Songs: A Comparative Analysis\",\n    subtitle = \"Scatter plot illustrating the correlation between album age and number of songs across artists\",\n    x = \"Album Age (Years)\",\n    y = \"Number of Songs\",\n    color = \"Artist Name\"\n  )\n\n\n\n\n\n\n\nWhat are some potential consequences of not including proper labels on our plots? Select all that apply. [Multiple Answers]\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\n\nToday’s exploration of the ggplot2 package in R has taken us through the intricacies of Geoms, Stats, and Guides. We’ve utilized all_tracks_cleaned_df, album_info_df, and artist_overview_df to demonstrate the creation of compelling visualizations, from basic bar charts to insightful violin and scatter plots.\n\ngeoms showed the diverse ways data can be visually represented.\nStats added a layer of depth by integrating statistical summaries.\nGuides enhanced our plots with clear legends and annotations, making them informative and accessible."
  },
  {
    "objectID": "index.html#but-wait-we-have-to-understand",
    "href": "index.html#but-wait-we-have-to-understand",
    "title": "CS 123 Teaching Demonstration",
    "section": "But wait … we have to understand",
    "text": "But wait … we have to understand"
  },
  {
    "objectID": "index.html#variables",
    "href": "index.html#variables",
    "title": "CS 123 Teaching Demonstration",
    "section": "",
    "text": "Typically, I determine:\n\nWhat is/are variable(s) that are in your question.\nHow many variables are you investigating?\nWhat are the variable types? Strings or numeric.\n\nBased on this information we can then determine how we can represent that information in a visualization."
  },
  {
    "objectID": "index.html#geoms-in-ggplot2",
    "href": "index.html#geoms-in-ggplot2",
    "title": "CS 123 Teaching Demonstration",
    "section": "",
    "text": "geoms, or geometric objects, are the fundamental visual representations of data in ggplot2.\nDepending on the type of data and the story we want to tell, we choose different geoms.\n\n\n\n\n\n\nInvestigating Count Data - geom_bar\n\n\n\n\n\n\nType of Data: One or more variables that are strings (e.g., “Artist”)\nWe’ll create a bar plot using geom_bar() with the artist_overview_df data frame to visualize the count of albums by each artist group.\n\n\n# Bar plot to show the number of albums per artist\nggplot(artist_overview_df, aes(x = artist_name, y = Number_of_Albums)) +\n  geom_bar(stat = 'identity') \n\n\n\n\nThis visualization will help us see which artist group released the most albums.\n\n\n\n\n\n\n\n\n\n\nInvestigating Numeric Data - geom_boxplot\n\n\n\n\n\n\n\nType of Data: One string variable (Artist) and one numeric variable (Energy)\nUsing geom_boxplot() with the all_tracks_cleaned_df, we’ll create a boxplot to visualize the distribution of energy levels across different artist groups.\n\n\n\n\n# Boxplot to show the distribution of energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_boxplot() \n\n\n\n\n\nThis visualization will help us see the median, IQR, and skewness of numeric data.\nYou can investigate more geoms here.\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\nConvert a boxplot to a violin plot using the geom_violin() function. [Code]\n\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin()\n\n\n\n\n\n\n\nWhat do you notice about the violin plot compared to the boxplot? [Multiple Choice]"
  },
  {
    "objectID": "index.html#code-and-visualization",
    "href": "index.html#code-and-visualization",
    "title": "CS 123 Teaching Demonstration",
    "section": "",
    "text": "# Boxplot to show the distribution of energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_boxplot()"
  },
  {
    "objectID": "index.html#question-1",
    "href": "index.html#question-1",
    "title": "CS 123 Teaching Demonstration",
    "section": "",
    "text": "Convert a boxplot to a violin plot using the geom_violin() function. [Code]\n\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin()"
  },
  {
    "objectID": "index.html#question-2",
    "href": "index.html#question-2",
    "title": "CS 123 Teaching Demonstration",
    "section": "",
    "text": "What do you notice about the violin plot compared to the boxplot? [Multiple Choice]"
  },
  {
    "objectID": "index.html#question-3-adding-summary-statistics-to-geoms",
    "href": "index.html#question-3-adding-summary-statistics-to-geoms",
    "title": "CS 123 Teaching Demonstration",
    "section": "",
    "text": "Complete the code to overlay text on the bars using geom_text().[Code]\nHow many albums do The Monkees have? [Numeric]"
  },
  {
    "objectID": "index.html#question-4",
    "href": "index.html#question-4",
    "title": "CS 123 Teaching Demonstration",
    "section": "",
    "text": "What are the advantages of displaying numerical values on each bar in a bar chart? [Multiple Answers]"
  },
  {
    "objectID": "index.html#code-and-visualization-2",
    "href": "index.html#code-and-visualization-2",
    "title": "CS 123 Teaching Demonstration",
    "section": "",
    "text": "# Example code for adding labels to a plot\nggplot(data = album_info_df , aes(x = Energy, y = Valence)) +\n  geom_point() +\n  labs(\n    title = \"Energy vs Valence: Exploring Album Characteristics\",\n    subtitle = \"A scatter plot illustrating the relationship between energy and valence in albums\",\n    x = \"Energy\",\n    y = \"Valence\"\n  )"
  },
  {
    "objectID": "learning_objectives.html",
    "href": "learning_objectives.html",
    "title": "Learning Objectives",
    "section": "",
    "text": "ggplot: Layered Approach\n\n\nDescription: ggplot builds plots using a layered approach. Each layer adds a new element to the plot, making complex visualizations achievable through simple building blocks.\n\n\nGeom: Visual Representation\n\n\nDescription: Geoms (geometric objects) are the heart of a ggplot plot. They provide the visual representations of data.\nExamples:\nPoints for scatter plots\nBoxplots and Violin Plots for showing distributions and comparing groups\nBars for bar charts\n\n\nStat: Statistical Transformations\n\n\nDescription: Statistical transformations (Stats) process your data to create summaries or perform calculations.\nKey Concepts:\nCounting data points\nSummarizing datasets\n\n\nGuide: Annotations and Legends\n\n\nDescription: Guides include all the necessary annotations to make a plot readable and informative.\nElements:\nLegends to explain scales\nAxis labels for clarity\nTitle and subtitles for context"
  },
  {
    "objectID": "learning_objectives.html#learning-objectives",
    "href": "learning_objectives.html#learning-objectives",
    "title": "Learning Objectives",
    "section": "",
    "text": "ggplot: Layered Approach\n\n\nDescription: ggplot builds plots using a layered approach. Each layer adds a new element to the plot, making complex visualizations achievable through simple building blocks.\n\n\nGeom: Visual Representation\n\n\nDescription: Geoms (geometric objects) are the heart of a ggplot plot. They provide the visual representations of data.\nExamples:\nPoints for scatter plots\nBoxplots and Violin Plots for showing distributions and comparing groups\nBars for bar charts\n\n\nStat: Statistical Transformations\n\n\nDescription: Statistical transformations (Stats) process your data to create summaries or perform calculations.\nKey Concepts:\nCounting data points\nSummarizing datasets\n\n\nGuide: Annotations and Legends\n\n\nDescription: Guides include all the necessary annotations to make a plot readable and informative.\nElements:\nLegends to explain scales\nAxis labels for clarity\nTitle and subtitles for context"
  },
  {
    "objectID": "outline.html",
    "href": "outline.html",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "",
    "text": "Brief Overview: Introduction to the session, highlighting the connection between data visualization, art, and computation.\nLearning Objectives Recap: Review the key learning objectives of CS 123."
  },
  {
    "objectID": "outline.html#introduction",
    "href": "outline.html#introduction",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "",
    "text": "Brief Overview: Introduction to the session, highlighting the connection between data visualization, art, and computation.\nLearning Objectives Recap: Review the key learning objectives of CS 123."
  },
  {
    "objectID": "outline.html#section-1-data-manipulation-refresher",
    "href": "outline.html#section-1-data-manipulation-refresher",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "Section 1: Data Manipulation Refresher",
    "text": "Section 1: Data Manipulation Refresher\n\nReview of a Join Function: Demonstrating how to merge datasets in R.\nBind Rows: Combining multiple datasets.\nFilter Function: Extracting specific data based on conditions.\nGroup By and Summarize: Aggregating data for meaningful insights."
  },
  {
    "objectID": "outline.html#section-2-understanding-ggplot-and-layers",
    "href": "outline.html#section-2-understanding-ggplot-and-layers",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "Section 2: Understanding ggplot and Layers",
    "text": "Section 2: Understanding ggplot and Layers\n\nIntroduction to ggplot: Basic concepts and syntax.\nExploring Layers in ggplot: How layers work to build a plot."
  },
  {
    "objectID": "outline.html#section-3-working-with-data-frames",
    "href": "outline.html#section-3-working-with-data-frames",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "Section 3: Working with Data Frames",
    "text": "Section 3: Working with Data Frames\n\nData Frame Structure: Understanding rows and columns in the context of datasets.\nVariables and Plot Types: How variable types dictate the choice of plots."
  },
  {
    "objectID": "outline.html#section-4-case-study---music-data-analysis",
    "href": "outline.html#section-4-case-study---music-data-analysis",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "Section 4: Case Study - Music Data Analysis",
    "text": "Section 4: Case Study - Music Data Analysis\n\nDataset Introduction: Spotify data on The Beatles, The Rolling Stones, and The Monkees.\nInteractive Coding: Participants modify code to explore different ggplot functions:\n\ngeom_bar\ngeom_violin\ngeom_boxplot\ngeom_point"
  },
  {
    "objectID": "outline.html#section-5-hands-on-exercise",
    "href": "outline.html#section-5-hands-on-exercise",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "Section 5: Hands-on Exercise",
    "text": "Section 5: Hands-on Exercise\n\nTask: Observers will engage in programming a simple plot.\nVariables of Interest: Number of Songs, Number of Albums, Valence, and Energy.\nObjective: Understanding the practical application of ggplot in visualizing data."
  },
  {
    "objectID": "outline.html#conclusion",
    "href": "outline.html#conclusion",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "Conclusion",
    "text": "Conclusion\n\nRecap of Key Points: Summarizing what was covered in the demonstration.\nQ&A Session: Open floor for questions and clarifications.\nConnecting to Course Objectives: Relating the demonstration back to CS 123’s objectives of understanding computational art, teamwork, and developing a personal aesthetic in digital creations."
  },
  {
    "objectID": "outline.html#references",
    "href": "outline.html#references",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "References",
    "text": "References\n\nggplot Documentation: [Link to ggplot resources]\nSpotify Dataset Source: [Link to the dataset used]"
  },
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "CS 123 Teaching Demonstration",
    "section": "",
    "text": "Review of the Extract-Transform (E-T) Process\n\n\n\n\n\n\n\n\nWe extracted data using the Spotify API and transformed it using various dplyr functions. Link to Extraction and Transformation Process. Additionally, here’s a reference to research presented at a conference of Extraction Transformation Visualization (ETV) a teaching data science technique.\n\n\n\n\nBind Rows: Combining all_tracks_df. See this section of the notes for more details.\nFilter Function: Filtering data in all_tracks_cleaned_df. Refer to this section of the notes for additional information.\nGroup By and Summarize: Demonstrating these processes with album_info_df and artist_overview_df. Further details can be found in this section of the notes.\n\nWe are going to load the data from our previous work with following code:\n\n# Load the data from the R data file\nload(\"music_data.rda\")\n\n\n\n\n\n\n\n\n\n\n\nIntroduction\n\n\n\n\n\nIn this module, we will explore how to create visualizations using the ggplot2 package in R.\nWe’ll focus on understanding:\n\ngeoms: the different types of geometric objects\nSummary Statistics: The stat_summary function can calculate summary statistics (like mean, median, min, max, etc.) for each group of data\nThe importance of labels in making plots informative.\n\n\n\n\n\n\n\n\n\n\n0. Lets Visualize using ggplot\n\n\n\n\n\n\nThe ggplot2 package in R is a powerful and flexible system for creating data visualizations.\nBuilt upon the principles of the Grammar of Graphics, it allows users to construct plots by layering components systematically.\nggplot2 is renowned for its ability to handle complex visualization tasks with ease, offering a wide range of plot types and customization options.\n\n\nlibrary(ggplot2)\n\n\nggplot(data = all_tracks_cleaned_df)\n\n\n\n\n\n\n\n\nNow that we have the data, we must specify the variable(s) that we are interested to create a visualization.\n\n\n\n\n\n\n\n\n\n1. Understanding Geoms\n\n\n\n\n\nDefinition: Geoms (geometric objects) are the visual representations of data in ggplot2. Examples include points, lines, and bars.\n\n\n\n\n\nTypically, I determine:\n\nWhat is/are variable(s) that are in your question.\nHow many variables are you investigating?\nWhat are the variable types? Strings or numeric.\n\nBased on this information we can then determine how we can represent that information in a visualization.\n\n\n\ngeoms, or geometric objects, are the fundamental visual representations of data in ggplot2.\nDepending on the type of data and the story we want to tell, we choose different geoms.\n\n\n\n\n\n\nInvestigating Count Data - geom_bar\n\n\n\n\n\n\nType of Data: One or more variables that are strings (e.g., “Artist”)\nWe’ll create a bar plot using geom_bar() with the artist_overview_df data frame to visualize the count of albums by each artist group.\n\n\n# Bar plot to show the number of albums per artist\nggplot(artist_overview_df, aes(x = artist_name, y = Number_of_Albums)) +\n  geom_bar(stat = 'identity') \n\n\n\n\nThis visualization will help us see which artist group released the most albums.\n\n\n\n\n\n\n\n\n\n\nInvestigating Numeric Data - geom_boxplot\n\n\n\n\n\n\n\nType of Data: One string variable (Artist) and one numeric variable (Energy)\nUsing geom_boxplot() with the all_tracks_cleaned_df, we’ll create a boxplot to visualize the distribution of energy levels across different artist groups.\n\n\n\n\n# Boxplot to show the distribution of energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_boxplot() \n\n\n\n\n\nThis visualization will help us see the median, IQR, and skewness of numeric data.\nYou can investigate more geoms here.\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\nConvert a boxplot to a violin plot using the geom_violin() function. [Code]\n\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin()\n\n\n\n\n\n\n\nWhat do you notice about the violin plot compared to the boxplot? [Multiple Choice]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. Exploring Stats within ggplot\n\n\n\n\n\n\nDefinition: In ggplot2, stats are key elements that help summarize and represent data. They allow us to visualize the central tendency or the most typical value in the data. One of the functions used for this purpose is stat_summary().\nWe will use stat_summary() in conjunction with geom_violin() to enhance our violin plot. By applying stat_summary(), we can overlay summary statistics, such as mean or median, on the violin plot created from all_tracks_cleaned_df.\nThis approach not only visualizes the distribution of energy levels across different artist groups but also marks key statistical indicators for more insightful data interpretation.\n\n\n\n\n# Enhanced Violin plot with summary statistics for energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin() +\n  stat_summary(fun = mean, geom = \"point\", shape = 20, size = 6, color = \"black\")\n\n\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\n\nComplete the code to overlay text on the bars using geom_text().[Code]\nHow many albums do The Monkees have? [Numeric]\n\n\n\n\nWhat are the advantages of displaying numerical values on each bar in a bar chart? [Multiple Answers]\n\n\n\n\n\n\n\n\n\n\n\n\n\n3. Guide: Legends and Annotations\n\n\n\n\n\n\nDefinition: In ggplot2, guides are critical elements that enhance the interpretability of a plot. They include legends, axes labels, titles, and other annotations, serving as navigational tools that provide context and improve readability.\nTo demonstrate the importance of guides, we will enhance a scatter plot created from album_info_df.\n\n\n\n\n# Example code for adding labels to a plot\nggplot(data = album_info_df , aes(x = Energy, y = Valence)) +\n  geom_point() +\n  labs(\n    title = \"Energy vs Valence: Exploring Album Characteristics\",\n    subtitle = \"A scatter plot illustrating the relationship between energy and valence in albums\",\n    x = \"Energy\",\n    y = \"Valence\"\n  )\n\n\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\nWe are creating a scatter plot with geom_point using the variables album_age and Number_of_Songs. Edit the code to include a title, axis labels, and a legend title that match the ones in the provided plot. Specifically, set the title to ‘Album Age vs Number of Songs: A Comparative Analysis’, the subtitle to ‘Scatter plot illustrating the correlation between album age and number of songs across artists’, the x-axis label to ‘Album Age (Years)’, the y-axis label to ‘Number of Songs’, and the color legend title to ‘Artist Name’. [Code]\n\n# Your code to add labels to a scatter plot goes here\nggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +\n  geom_point() +\n  labs(\n    title = \"Plot Title: Relationship Between X and Y\",\n    subtitle = \"Information about plot\",\n    x = \"X Variable Name\",\n    y = \"Y Variable Name\",\n    color = \"Legend Name\"\n  )\n\n\n\n\n\n# Your code to add labels to a scatter plot goes here\nggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +\n  geom_point() +\n  labs(\n    title = \"Album Age vs Number of Songs: A Comparative Analysis\",\n    subtitle = \"Scatter plot illustrating the correlation between album age and number of songs across artists\",\n    x = \"Album Age (Years)\",\n    y = \"Number of Songs\",\n    color = \"Artist Name\"\n  )\n\n\n\n\n\n\n\nWhat are some potential consequences of not including proper labels on our plots? Select all that apply. [Multiple Answers]\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\n\nToday’s exploration of the ggplot2 package in R has taken us through the intricacies of Geoms, Stats, and Guides. We’ve utilized all_tracks_cleaned_df, album_info_df, and artist_overview_df to demonstrate the creation of compelling visualizations, from basic bar charts to insightful violin and scatter plots.\n\ngeoms showed the diverse ways data can be visually represented.\nStats added a layer of depth by integrating statistical summaries.\nGuides enhanced our plots with clear legends and annotations, making them informative and accessible."
  },
  {
    "objectID": "index.html#width375height425",
    "href": "index.html#width375height425",
    "title": "CS 123 Teaching Demonstration",
    "section": "",
    "text": "Review of the Extract-Transform (E-T) Process\n\n\n\n\n\n\n\n\nWe extracted data using the Spotify API and transformed it using various dplyr functions. Link to Extraction and Transformation Process. Additionally, here’s a reference to research presented at a conference of Extraction Transformation Visualization (ETV) a teaching data science technique.\n\n\n\n\nBind Rows: Combining all_tracks_df. See this section of the notes for more details.\nFilter Function: Filtering data in all_tracks_cleaned_df. Refer to this section of the notes for additional information.\nGroup By and Summarize: Demonstrating these processes with album_info_df and artist_overview_df. Further details can be found in this section of the notes.\n\nWe are going to load the data from our previous work with following code:\n\n# Load the data from the R data file\nload(\"music_data.rda\")\n\n\n\n\n\n\n\n\n\n\n\nIntroduction\n\n\n\n\n\nIn this module, we will explore how to create visualizations using the ggplot2 package in R.\nWe’ll focus on understanding:\n\ngeoms: the different types of geometric objects\nSummary Statistics: The stat_summary function can calculate summary statistics (like mean, median, min, max, etc.) for each group of data\nThe importance of labels in making plots informative.\n\n\n\n\n\n\n\n\n\n\n0. Lets Visualize using ggplot\n\n\n\n\n\n\nThe ggplot2 package in R is a powerful and flexible system for creating data visualizations.\nBuilt upon the principles of the Grammar of Graphics, it allows users to construct plots by layering components systematically.\nggplot2 is renowned for its ability to handle complex visualization tasks with ease, offering a wide range of plot types and customization options.\n\n\nlibrary(ggplot2)\n\n\nggplot(data = all_tracks_cleaned_df)\n\n\n\n\n\n\n\n\nNow that we have the data, we must specify the variable(s) that we are interested to create a visualization.\n\n\n\n\n\n\n\n\n\n1. Understanding Geoms\n\n\n\n\n\nDefinition: Geoms (geometric objects) are the visual representations of data in ggplot2. Examples include points, lines, and bars.\n\n\n\n\n\nTypically, I determine:\n\nWhat is/are variable(s) that are in your question.\nHow many variables are you investigating?\nWhat are the variable types? Strings or numeric.\n\nBased on this information we can then determine how we can represent that information in a visualization.\n\n\n\ngeoms, or geometric objects, are the fundamental visual representations of data in ggplot2.\nDepending on the type of data and the story we want to tell, we choose different geoms.\n\n\n\n\n\n\nInvestigating Count Data - geom_bar\n\n\n\n\n\n\nType of Data: One or more variables that are strings (e.g., “Artist”)\nWe’ll create a bar plot using geom_bar() with the artist_overview_df data frame to visualize the count of albums by each artist group.\n\n\n# Bar plot to show the number of albums per artist\nggplot(artist_overview_df, aes(x = artist_name, y = Number_of_Albums)) +\n  geom_bar(stat = 'identity') \n\n\n\n\nThis visualization will help us see which artist group released the most albums.\n\n\n\n\n\n\n\n\n\n\nInvestigating Numeric Data - geom_boxplot\n\n\n\n\n\n\n\nType of Data: One string variable (Artist) and one numeric variable (Energy)\nUsing geom_boxplot() with the all_tracks_cleaned_df, we’ll create a boxplot to visualize the distribution of energy levels across different artist groups.\n\n\n\n\n# Boxplot to show the distribution of energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_boxplot() \n\n\n\n\n\nThis visualization will help us see the median, IQR, and skewness of numeric data.\nYou can investigate more geoms here.\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\nConvert a boxplot to a violin plot using the geom_violin() function. [Code]\n\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin()\n\n\n\n\n\n\n\nWhat do you notice about the violin plot compared to the boxplot? [Multiple Choice]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. Exploring Stats within ggplot\n\n\n\n\n\n\nDefinition: In ggplot2, stats are key elements that help summarize and represent data. They allow us to visualize the central tendency or the most typical value in the data. One of the functions used for this purpose is stat_summary().\nWe will use stat_summary() in conjunction with geom_violin() to enhance our violin plot. By applying stat_summary(), we can overlay summary statistics, such as mean or median, on the violin plot created from all_tracks_cleaned_df.\nThis approach not only visualizes the distribution of energy levels across different artist groups but also marks key statistical indicators for more insightful data interpretation.\n\n\n\n\n# Enhanced Violin plot with summary statistics for energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin() +\n  stat_summary(fun = mean, geom = \"point\", shape = 20, size = 6, color = \"black\")\n\n\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\n\nComplete the code to overlay text on the bars using geom_text().[Code]\nHow many albums do The Monkees have? [Numeric]\n\n\n\n\nWhat are the advantages of displaying numerical values on each bar in a bar chart? [Multiple Answers]\n\n\n\n\n\n\n\n\n\n\n\n\n\n3. Guide: Legends and Annotations\n\n\n\n\n\n\nDefinition: In ggplot2, guides are critical elements that enhance the interpretability of a plot. They include legends, axes labels, titles, and other annotations, serving as navigational tools that provide context and improve readability.\nTo demonstrate the importance of guides, we will enhance a scatter plot created from album_info_df.\n\n\n\n\n# Example code for adding labels to a plot\nggplot(data = album_info_df , aes(x = Energy, y = Valence)) +\n  geom_point() +\n  labs(\n    title = \"Energy vs Valence: Exploring Album Characteristics\",\n    subtitle = \"A scatter plot illustrating the relationship between energy and valence in albums\",\n    x = \"Energy\",\n    y = \"Valence\"\n  )\n\n\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\nWe are creating a scatter plot with geom_point using the variables album_age and Number_of_Songs. Edit the code to include a title, axis labels, and a legend title that match the ones in the provided plot. Specifically, set the title to ‘Album Age vs Number of Songs: A Comparative Analysis’, the subtitle to ‘Scatter plot illustrating the correlation between album age and number of songs across artists’, the x-axis label to ‘Album Age (Years)’, the y-axis label to ‘Number of Songs’, and the color legend title to ‘Artist Name’. [Code]\n\n# Your code to add labels to a scatter plot goes here\nggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +\n  geom_point() +\n  labs(\n    title = \"Plot Title: Relationship Between X and Y\",\n    subtitle = \"Information about plot\",\n    x = \"X Variable Name\",\n    y = \"Y Variable Name\",\n    color = \"Legend Name\"\n  )\n\n\n\n\n\n# Your code to add labels to a scatter plot goes here\nggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +\n  geom_point() +\n  labs(\n    title = \"Album Age vs Number of Songs: A Comparative Analysis\",\n    subtitle = \"Scatter plot illustrating the correlation between album age and number of songs across artists\",\n    x = \"Album Age (Years)\",\n    y = \"Number of Songs\",\n    color = \"Artist Name\"\n  )\n\n\n\n\n\n\n\nWhat are some potential consequences of not including proper labels on our plots? Select all that apply. [Multiple Answers]\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\n\nToday’s exploration of the ggplot2 package in R has taken us through the intricacies of Geoms, Stats, and Guides. We’ve utilized all_tracks_cleaned_df, album_info_df, and artist_overview_df to demonstrate the creation of compelling visualizations, from basic bar charts to insightful violin and scatter plots.\n\ngeoms showed the diverse ways data can be visually represented.\nStats added a layer of depth by integrating statistical summaries.\nGuides enhanced our plots with clear legends and annotations, making them informative and accessible."
  }
]