[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Initial Principles of Data Visualizations",
    "section": "",
    "text": "Review of the Extract & Transform\n\n\n\n\n\nETV\n\n\n\n\nWe extracted data using the Spotify API and transformed it using various dplyr functions. Review Extraction and Transformation Process.\n\n\n\n\n\n\n\nBind Rows: Combining all_tracks_df. See this section of the notes for more details.\nFilter Function: Filtering data in all_tracks_cleaned_df. Refer to this section of the notes for additional information.\nGroup By and Summarize: Demonstrating these processes with album_info_df and artist_overview_df. Further details can be found in this section of the notes.\n\nWe are going to load the data from our previous work with following code:\n\n# Load the data from the R data file\nload(\"music_data.rda\")\n\n\nstr(album_info_df)\n\ntibble [106 × 7] (S3: tbl_df/tbl/data.frame)\n $ artist_name       : chr [1:106] \"The Beatles\" \"The Beatles\" \"The Beatles\" \"The Beatles\" ...\n $ album_name        : chr [1:106] \"A Hard Day's Night (Remastered)\" \"Abbey Road (Remastered)\" \"Abbey Road (Super Deluxe Edition)\" \"Beatles For Sale (Remastered)\" ...\n $ album_release_year: num [1:106] 1964 1969 2019 1964 2022 ...\n $ Energy            : num [1:106] 0.61 0.457 0.46 0.596 0.389 ...\n $ Valence           : num [1:106] 0.761 0.459 0.458 0.812 0.898 ...\n $ Number_of_Songs   : int [1:106] 13 17 7 14 1 14 12 17 1 53 ...\n $ album_age         : num [1:106] 60 55 5 60 2 59 54 3 10 30 ...\n\n\n\ntibble::glimpse(album_info_df)\n\nRows: 106\nColumns: 7\n$ artist_name        &lt;chr&gt; \"The Beatles\", \"The Beatles\", \"The Beatles\", \"The B…\n$ album_name         &lt;chr&gt; \"A Hard Day's Night (Remastered)\", \"Abbey Road (Rem…\n$ album_release_year &lt;dbl&gt; 1964, 1969, 2019, 1964, 2022, 1965, 1970, 2021, 201…\n$ Energy             &lt;dbl&gt; 0.6095385, 0.4571765, 0.4602857, 0.5964286, 0.38900…\n$ Valence            &lt;dbl&gt; 0.7614615, 0.4591765, 0.4581429, 0.8120000, 0.89800…\n$ Number_of_Songs    &lt;int&gt; 13, 17, 7, 14, 1, 14, 12, 17, 1, 53, 1, 9, 33, 14, …\n$ album_age          &lt;dbl&gt; 60, 55, 5, 60, 2, 59, 54, 3, 10, 30, 8, 57, 11, 61,…\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to the package ggplot2\n\n\n\n\n\nIn this module, we will explore how to create visualizations using the ggplot2 package in R.\nWe’ll focus on understanding:\n\ngeoms: the different types of geometric objects\nSummary Statistics: The stat_summary function can calculate summary statistics (like mean, median, min, max, etc.) for each group of data\nThe importance of labels in making plots informative.\n\n\n\n\n\n\n\n\n\n\n0. Lets visualize using ggplot\n\n\n\n\n\n\nThe ggplot2 package in R is a powerful and flexible system for creating data visualizations.\nBuilt upon the principles of the Grammar of Graphics, it allows users to construct plots by layering components systematically.\nggplot2 is renowned for its ability to handle complex visualization tasks, offering a wide range of plot types and customization options.\n\n\nlibrary(ggplot2)\n\n\nggplot(data = all_tracks_cleaned_df)\n\n\n\n\n\n\n\n\nNow that we have the data, we must specify the variable(s) that we are interested to create a visualization.\n\n\n\n\n\n\n\n\n\n1. geoms\n\n\n\n\n\n\n\n\n\n\nTypically, I determine:\n\nWhat your question?\nHow many variables are in your question?\nWhat are the variable types? Strings or numeric.\n\nBased on this information we can then determine how we can represent that information in a visualization.\n\n\n\nDefinition: geoms (geometric objects) are the visual representations of data in ggplot2. Examples include points, lines, and bars.\ngeoms, or geometric objects, are the fundamental visual representations of data in ggplot2.\nDepending on the type of data and the story we want to tell, we choose different geoms.\n\n\n\n\n\n\nInvestigating Count Data - geom_bar\n\n\n\n\n\n\nType of Data: One or more variables that are strings (e.g., “Artist”)\nWe’ll create a bar plot using geom_bar() with the artist_overview_df data frame to visualize the count of albums by each artist group.\n\n[red] talk about aes\n\n\n\n# # Bar plot to show the number of albums per artist\n# ggplot(album_info_df, aes(x = artist_name, y = Number_of_Albums)) +\n#   geom_bar(stat = 'count') \n\nThis visualization will help us see which artist group released the most albums.\n\n\n\n\n\n\n\n\n\n\nInvestigating Numeric Data - geom_boxplot\n\n\n\n\n\nTypically, I determine:\n\nWhat your question?\nHow many variables are in your question?\nWhat are the variable types? Strings or numeric.\n\n\n\nType of Data: One string variable (Artist) and one numeric variable (Energy)\nUsing geom_boxplot() with the all_tracks_cleaned_df, we’ll create a boxplot to visualize the distribution of energy levels across different artist groups.\n\n\n\n\n# Boxplot to show the distribution of energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_boxplot() \n\n\n\n\n\n\ntalk about limitation to boxplot, you can add relatve sample size\nask students to look up violin plot\ntheir ability to look up help page\nwhat did you learn from these visualizations\nspecify what energy is measured and it was aggregated by album\n\nThis visualization will help us see the median, IQR, and skewness of numeric data.\nYou can investigate more geoms here.\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\nConvert a boxplot to a violin plot using the geom_violin() function. [Code]\n\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin()\n\n\n\n\n\n\n\nWhat do you notice about the violin plot compared to the boxplot? [Multiple Choice]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. Stats within ggplot\n\n\n\n\n\n\nDefinition: In ggplot2, stats are key elements that help summarize and represent data. They allow us to visualize the central tendency or the most typical value in the data. One of the functions used for this purpose is stat_summary().\nWe will use stat_summary() in conjunction with geom_violin() to enhance our violin plot. By applying stat_summary(), we can overlay summary statistics, such as mean or median, on the violin plot created from all_tracks_cleaned_df.\nThis approach not only visualizes the distribution of energy levels across different artist groups but also marks key statistical indicators for more insightful data interpretation.\n\n\n\n\n# Enhanced Violin plot with summary statistics for energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin() +\n  stat_summary(fun = mean, geom = \"point\", shape = 20, size = 6, color = \"black\")\n\n\n\n\n\nadding appropriate labels and titles can answer the research question which will tell\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\n\nComplete the code to overlay text on the bars using geom_text().[Code]\nHow many albums do The Monkees have? [Numeric]\n\n\n\n\nWhat are the advantages of displaying numerical values on each bar in a bar chart? [Multiple Answers]\n\n\n\n\n\n\n\n\n\n\n\n\n\n3. Guide: Legends and Annotations\n\n\n\n\n\n\nDefinition: In ggplot2, guides are critical elements that enhance the interpretability of a plot. They include legends, axes labels, titles, and other annotations, serving as navigational tools that provide context and improve readability.\nTo demonstrate the importance of guides, we will enhance a scatter plot created from album_info_df.\n\n\n\n\n# Example code for adding labels to a plot\nggplot(data = album_info_df , aes(x = Energy, y = Valence)) +\n  geom_point() +\n  labs(\n    title = \"Energy vs Valence: Exploring Album Characteristics\",\n    subtitle = \"A scatter plot illustrating the relationship between energy and valence in albums\",\n    x = \"Energy\",\n    y = \"Valence\"\n  )\n\n\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\nWe are creating a scatter plot with geom_point using the variables album_age and Number_of_Songs. Edit the code to include a title, axis labels, and a legend title that match the ones in the provided plot. Specifically, set the title to ‘Album Age vs Number of Songs: A Comparative Analysis’, the subtitle to ‘Scatter plot illustrating the correlation between album age and number of songs across artists’, the x-axis label to ‘Album Age (Years)’, the y-axis label to ‘Number of Songs’, and the color legend title to ‘Artist Name’. [Code]\n\n# Your code to add labels to a scatter plot goes here\nggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +\n  geom_point() +\n  labs(\n    title = \"Plot Title: Relationship Between X and Y\",\n    subtitle = \"Information about plot\",\n    x = \"X Variable Name\",\n    y = \"Y Variable Name\",\n    color = \"Legend Name\"\n  )\n\n\n\n\n\n# Your code to add labels to a scatter plot goes here\nggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +\n  geom_point() +\n  labs(\n    title = \"Album Age vs Number of Songs: A Comparative Analysis\",\n    subtitle = \"Scatter plot illustrating the correlation between album age and number of songs across artists\",\n    x = \"Album Age (Years)\",\n    y = \"Number of Songs\",\n    color = \"Artist Name\"\n  )\n\n\n\n\n\n\n\nWhat are some potential consequences of not including proper labels on our plots? Select all that apply. [Multiple Answers]\n\ndo not include the scatter plot\ncode live or have students di it\nintention with colors discussion\ncolor coding and faceting based on artist\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\n\nToday’s exploration of the ggplot2 package in R has taken us through the intricacies of Geoms, Stats, and Guides. We’ve utilized all_tracks_cleaned_df, album_info_df, and artist_overview_df to demonstrate the creation of compelling visualizations, from basic bar charts to insightful violin and scatter plots.\n\ngeoms showed the diverse ways data can be visually represented.\nStats added a layer of depth by integrating statistical summaries.\nGuides enhanced our plots with clear legends and annotations, making them informative and accessible."
  },
  {
    "objectID": "index.html#lets-analyze-these-artists",
    "href": "index.html#lets-analyze-these-artists",
    "title": "Initial Principles of Data Visualizations",
    "section": "",
    "text": "Review of the Extract & Transform\n\n\n\n\n\nETV\n\n\n\n\nWe extracted data using the Spotify API and transformed it using various dplyr functions. Review Extraction and Transformation Process.\n\n\n\n\n\n\n\nBind Rows: Combining all_tracks_df. See this section of the notes for more details.\nFilter Function: Filtering data in all_tracks_cleaned_df. Refer to this section of the notes for additional information.\nGroup By and Summarize: Demonstrating these processes with album_info_df and artist_overview_df. Further details can be found in this section of the notes.\n\nWe are going to load the data from our previous work with following code:\n\n# Load the data from the R data file\nload(\"music_data.rda\")\n\n\nstr(album_info_df)\n\ntibble [106 × 7] (S3: tbl_df/tbl/data.frame)\n $ artist_name       : chr [1:106] \"The Beatles\" \"The Beatles\" \"The Beatles\" \"The Beatles\" ...\n $ album_name        : chr [1:106] \"A Hard Day's Night (Remastered)\" \"Abbey Road (Remastered)\" \"Abbey Road (Super Deluxe Edition)\" \"Beatles For Sale (Remastered)\" ...\n $ album_release_year: num [1:106] 1964 1969 2019 1964 2022 ...\n $ Energy            : num [1:106] 0.61 0.457 0.46 0.596 0.389 ...\n $ Valence           : num [1:106] 0.761 0.459 0.458 0.812 0.898 ...\n $ Number_of_Songs   : int [1:106] 13 17 7 14 1 14 12 17 1 53 ...\n $ album_age         : num [1:106] 60 55 5 60 2 59 54 3 10 30 ...\n\n\n\ntibble::glimpse(album_info_df)\n\nRows: 106\nColumns: 7\n$ artist_name        &lt;chr&gt; \"The Beatles\", \"The Beatles\", \"The Beatles\", \"The B…\n$ album_name         &lt;chr&gt; \"A Hard Day's Night (Remastered)\", \"Abbey Road (Rem…\n$ album_release_year &lt;dbl&gt; 1964, 1969, 2019, 1964, 2022, 1965, 1970, 2021, 201…\n$ Energy             &lt;dbl&gt; 0.6095385, 0.4571765, 0.4602857, 0.5964286, 0.38900…\n$ Valence            &lt;dbl&gt; 0.7614615, 0.4591765, 0.4581429, 0.8120000, 0.89800…\n$ Number_of_Songs    &lt;int&gt; 13, 17, 7, 14, 1, 14, 12, 17, 1, 53, 1, 9, 33, 14, …\n$ album_age          &lt;dbl&gt; 60, 55, 5, 60, 2, 59, 54, 3, 10, 30, 8, 57, 11, 61,…\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to the package ggplot2\n\n\n\n\n\nIn this module, we will explore how to create visualizations using the ggplot2 package in R.\nWe’ll focus on understanding:\n\ngeoms: the different types of geometric objects\nSummary Statistics: The stat_summary function can calculate summary statistics (like mean, median, min, max, etc.) for each group of data\nThe importance of labels in making plots informative.\n\n\n\n\n\n\n\n\n\n\n0. Lets visualize using ggplot\n\n\n\n\n\n\nThe ggplot2 package in R is a powerful and flexible system for creating data visualizations.\nBuilt upon the principles of the Grammar of Graphics, it allows users to construct plots by layering components systematically.\nggplot2 is renowned for its ability to handle complex visualization tasks, offering a wide range of plot types and customization options.\n\n\nlibrary(ggplot2)\n\n\nggplot(data = all_tracks_cleaned_df)\n\n\n\n\n\n\n\n\nNow that we have the data, we must specify the variable(s) that we are interested to create a visualization.\n\n\n\n\n\n\n\n\n\n1. geoms\n\n\n\n\n\n\n\n\n\n\nTypically, I determine:\n\nWhat your question?\nHow many variables are in your question?\nWhat are the variable types? Strings or numeric.\n\nBased on this information we can then determine how we can represent that information in a visualization.\n\n\n\nDefinition: geoms (geometric objects) are the visual representations of data in ggplot2. Examples include points, lines, and bars.\ngeoms, or geometric objects, are the fundamental visual representations of data in ggplot2.\nDepending on the type of data and the story we want to tell, we choose different geoms.\n\n\n\n\n\n\nInvestigating Count Data - geom_bar\n\n\n\n\n\n\nType of Data: One or more variables that are strings (e.g., “Artist”)\nWe’ll create a bar plot using geom_bar() with the artist_overview_df data frame to visualize the count of albums by each artist group.\n\n[red] talk about aes\n\n\n\n# # Bar plot to show the number of albums per artist\n# ggplot(album_info_df, aes(x = artist_name, y = Number_of_Albums)) +\n#   geom_bar(stat = 'count') \n\nThis visualization will help us see which artist group released the most albums.\n\n\n\n\n\n\n\n\n\n\nInvestigating Numeric Data - geom_boxplot\n\n\n\n\n\nTypically, I determine:\n\nWhat your question?\nHow many variables are in your question?\nWhat are the variable types? Strings or numeric.\n\n\n\nType of Data: One string variable (Artist) and one numeric variable (Energy)\nUsing geom_boxplot() with the all_tracks_cleaned_df, we’ll create a boxplot to visualize the distribution of energy levels across different artist groups.\n\n\n\n\n# Boxplot to show the distribution of energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_boxplot() \n\n\n\n\n\n\ntalk about limitation to boxplot, you can add relatve sample size\nask students to look up violin plot\ntheir ability to look up help page\nwhat did you learn from these visualizations\nspecify what energy is measured and it was aggregated by album\n\nThis visualization will help us see the median, IQR, and skewness of numeric data.\nYou can investigate more geoms here.\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\nConvert a boxplot to a violin plot using the geom_violin() function. [Code]\n\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin()\n\n\n\n\n\n\n\nWhat do you notice about the violin plot compared to the boxplot? [Multiple Choice]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. Stats within ggplot\n\n\n\n\n\n\nDefinition: In ggplot2, stats are key elements that help summarize and represent data. They allow us to visualize the central tendency or the most typical value in the data. One of the functions used for this purpose is stat_summary().\nWe will use stat_summary() in conjunction with geom_violin() to enhance our violin plot. By applying stat_summary(), we can overlay summary statistics, such as mean or median, on the violin plot created from all_tracks_cleaned_df.\nThis approach not only visualizes the distribution of energy levels across different artist groups but also marks key statistical indicators for more insightful data interpretation.\n\n\n\n\n# Enhanced Violin plot with summary statistics for energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin() +\n  stat_summary(fun = mean, geom = \"point\", shape = 20, size = 6, color = \"black\")\n\n\n\n\n\nadding appropriate labels and titles can answer the research question which will tell\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\n\nComplete the code to overlay text on the bars using geom_text().[Code]\nHow many albums do The Monkees have? [Numeric]\n\n\n\n\nWhat are the advantages of displaying numerical values on each bar in a bar chart? [Multiple Answers]\n\n\n\n\n\n\n\n\n\n\n\n\n\n3. Guide: Legends and Annotations\n\n\n\n\n\n\nDefinition: In ggplot2, guides are critical elements that enhance the interpretability of a plot. They include legends, axes labels, titles, and other annotations, serving as navigational tools that provide context and improve readability.\nTo demonstrate the importance of guides, we will enhance a scatter plot created from album_info_df.\n\n\n\n\n# Example code for adding labels to a plot\nggplot(data = album_info_df , aes(x = Energy, y = Valence)) +\n  geom_point() +\n  labs(\n    title = \"Energy vs Valence: Exploring Album Characteristics\",\n    subtitle = \"A scatter plot illustrating the relationship between energy and valence in albums\",\n    x = \"Energy\",\n    y = \"Valence\"\n  )\n\n\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\n\nWe are creating a scatter plot with geom_point using the variables album_age and Number_of_Songs. Edit the code to include a title, axis labels, and a legend title that match the ones in the provided plot. Specifically, set the title to ‘Album Age vs Number of Songs: A Comparative Analysis’, the subtitle to ‘Scatter plot illustrating the correlation between album age and number of songs across artists’, the x-axis label to ‘Album Age (Years)’, the y-axis label to ‘Number of Songs’, and the color legend title to ‘Artist Name’. [Code]\n\n# Your code to add labels to a scatter plot goes here\nggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +\n  geom_point() +\n  labs(\n    title = \"Plot Title: Relationship Between X and Y\",\n    subtitle = \"Information about plot\",\n    x = \"X Variable Name\",\n    y = \"Y Variable Name\",\n    color = \"Legend Name\"\n  )\n\n\n\n\n\n# Your code to add labels to a scatter plot goes here\nggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +\n  geom_point() +\n  labs(\n    title = \"Album Age vs Number of Songs: A Comparative Analysis\",\n    subtitle = \"Scatter plot illustrating the correlation between album age and number of songs across artists\",\n    x = \"Album Age (Years)\",\n    y = \"Number of Songs\",\n    color = \"Artist Name\"\n  )\n\n\n\n\n\n\n\nWhat are some potential consequences of not including proper labels on our plots? Select all that apply. [Multiple Answers]\n\ndo not include the scatter plot\ncode live or have students di it\nintention with colors discussion\ncolor coding and faceting based on artist\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\n\nToday’s exploration of the ggplot2 package in R has taken us through the intricacies of Geoms, Stats, and Guides. We’ve utilized all_tracks_cleaned_df, album_info_df, and artist_overview_df to demonstrate the creation of compelling visualizations, from basic bar charts to insightful violin and scatter plots.\n\ngeoms showed the diverse ways data can be visually represented.\nStats added a layer of depth by integrating statistical summaries.\nGuides enhanced our plots with clear legends and annotations, making them informative and accessible."
  },
  {
    "objectID": "index.html#variables",
    "href": "index.html#variables",
    "title": "Initial Principles of Data Visualizations",
    "section": "Variables",
    "text": "Variables\nTypically, I determine:\n\nWhat your question?\nHow many variables are in your question?\nWhat are the variable types? Strings or numeric.\n\nBased on this information we can then determine how we can represent that information in a visualization."
  },
  {
    "objectID": "index.html#geoms-in-ggplot2",
    "href": "index.html#geoms-in-ggplot2",
    "title": "Initial Principles of Data Visualizations",
    "section": "geoms in ggplot2",
    "text": "geoms in ggplot2\nDefinition: geoms (geometric objects) are the visual representations of data in ggplot2. Examples include points, lines, and bars.\nDepending on the type of data and the story we want to tell, we choose different geoms.\n\n\n\n\n\n\nInvestigating Count Data - geom_bar\n\n\n\n\n\n\nWhat your question?\n\nWhich group had the most albums?\n\nHow many variables are in your question?\n\n2\n\nWhat are the variable types? Strings or numeric.\n\nType of Data: One or more variables that are strings (e.g., “Artist”)\nFill out the code as I explain each element of the code\n\n\n# # Bar plot to show the number of albums per artist\n# ggplot(data = album_info_df, \n# mapping = aes(\n# x = artist_name, \n#   y = Number_of_Albums)) +\n#   geom_bar(stat = 'count') \n\n\nSooo… Which group had the most albums?\n\n\n\n\n\n\n\n\n\n\n\nInvestigating Numeric Data - geom_boxplot\n\n\n\n\n\n\nWhat your question?\n\nWhat were the energy levels of each group’s albums?\n\nHow many variables are in your question? 2\nWhat are the variable types? Strings or numeric.\n\nType of Data: One string variable (Artist) and one numeric variable (Energy)\nFill out the code as I explain each element of the code\n\nCode and Visualization\n\n# Boxplot to show the distribution of energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_boxplot() \n\n\n\n\n\nSooo… What were the energy levels of each group’s albums?\n\n\n\ntalk about limitation to boxplot, you can add relatve sample size\nask students to look up violin plot\ntheir ability to look up help page\nwhat did you learn from these visualizations\nspecify what energy is measured and it was aggregated by album\n\nThis visualization will help us see the median, IQR, and skewness of numeric data.\nYou can investigate more geoms here.\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\nQuestion 1:\nConvert a boxplot to a violin plot using the geom_violin() function. [Code]\n\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin()\n\n\n\n\n\n\nQuestion 2:\nWhat do you notice about the violin plot compared to the boxplot? [Multiple Choice]"
  },
  {
    "objectID": "index.html#code-and-visualization",
    "href": "index.html#code-and-visualization",
    "title": "Initial Principles of Data Visualizations",
    "section": "Code and Visualization",
    "text": "Code and Visualization\n\n# Boxplot to show the distribution of energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_boxplot() \n\n\n\n\n\nSooo… What were the energy levels of each group’s albums?"
  },
  {
    "objectID": "index.html#question-1",
    "href": "index.html#question-1",
    "title": "Initial Principles of Data Visualizations",
    "section": "Question 1:",
    "text": "Question 1:\nConvert a boxplot to a violin plot using the geom_violin() function. [Code]\n\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin()"
  },
  {
    "objectID": "index.html#question-2",
    "href": "index.html#question-2",
    "title": "Initial Principles of Data Visualizations",
    "section": "Question 2:",
    "text": "Question 2:\nWhat do you notice about the violin plot compared to the boxplot? [Multiple Choice]"
  },
  {
    "objectID": "index.html#question-3-adding-summary-statistics-to-geoms",
    "href": "index.html#question-3-adding-summary-statistics-to-geoms",
    "title": "Initial Principles of Data Visualizations",
    "section": "Question 3: Adding Summary Statistics to Geoms",
    "text": "Question 3: Adding Summary Statistics to Geoms\n\nComplete the code to overlay text on the bars using geom_text().[Code]\nHow many albums do The Monkees have? [Numeric]"
  },
  {
    "objectID": "index.html#question-4",
    "href": "index.html#question-4",
    "title": "Initial Principles of Data Visualizations",
    "section": "Question 4:",
    "text": "Question 4:\nWhat are the advantages of displaying numerical values on each bar in a bar chart? [Multiple Answers]"
  },
  {
    "objectID": "index.html#code-and-visualization-2",
    "href": "index.html#code-and-visualization-2",
    "title": "Initial Principles of Data Visualizations",
    "section": "Code and Visualization",
    "text": "Code and Visualization\n\n# Example code for adding labels to a plot\nggplot(data = album_info_df , aes(x = Energy, y = Valence)) +\n  geom_point() +\n  labs(\n    title = \"Energy vs Valence: Exploring Album Characteristics\",\n    subtitle = \"A scatter plot illustrating the relationship between energy and valence in albums\",\n    x = \"Energy\",\n    y = \"Valence\"\n  )"
  },
  {
    "objectID": "learning_objectives.html",
    "href": "learning_objectives.html",
    "title": "Learning Objectives",
    "section": "",
    "text": "ggplot: Layered Approach\n\n\nDescription: ggplot builds plots using a layered approach. Each layer adds a new element to the plot, making complex visualizations achievable through simple building blocks.\n\n\nGeom: Visual Representation\n\n\nDescription: Geoms (geometric objects) are the heart of a ggplot plot. They provide the visual representations of data.\nExamples:\nPoints for scatter plots\nBoxplots and Violin Plots for showing distributions and comparing groups\nBars for bar charts\n\n\nStat: Statistical Transformations\n\n\nDescription: Statistical transformations (Stats) process your data to create summaries or perform calculations.\nKey Concepts:\nCounting data points\nSummarizing datasets\n\n\nGuide: Annotations and Legends\n\n\nDescription: Guides include all the necessary annotations to make a plot readable and informative.\nElements:\nLegends to explain scales\nAxis labels for clarity\nTitle and subtitles for context"
  },
  {
    "objectID": "learning_objectives.html#learning-objectives",
    "href": "learning_objectives.html#learning-objectives",
    "title": "Learning Objectives",
    "section": "",
    "text": "ggplot: Layered Approach\n\n\nDescription: ggplot builds plots using a layered approach. Each layer adds a new element to the plot, making complex visualizations achievable through simple building blocks.\n\n\nGeom: Visual Representation\n\n\nDescription: Geoms (geometric objects) are the heart of a ggplot plot. They provide the visual representations of data.\nExamples:\nPoints for scatter plots\nBoxplots and Violin Plots for showing distributions and comparing groups\nBars for bar charts\n\n\nStat: Statistical Transformations\n\n\nDescription: Statistical transformations (Stats) process your data to create summaries or perform calculations.\nKey Concepts:\nCounting data points\nSummarizing datasets\n\n\nGuide: Annotations and Legends\n\n\nDescription: Guides include all the necessary annotations to make a plot readable and informative.\nElements:\nLegends to explain scales\nAxis labels for clarity\nTitle and subtitles for context"
  },
  {
    "objectID": "outline.html",
    "href": "outline.html",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "",
    "text": "Brief Overview: Introduction to the session, highlighting the connection between data visualization, art, and computation.\nLearning Objectives Recap: Review the key learning objectives of CS 123."
  },
  {
    "objectID": "outline.html#introduction",
    "href": "outline.html#introduction",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "",
    "text": "Brief Overview: Introduction to the session, highlighting the connection between data visualization, art, and computation.\nLearning Objectives Recap: Review the key learning objectives of CS 123."
  },
  {
    "objectID": "outline.html#section-1-data-manipulation-refresher",
    "href": "outline.html#section-1-data-manipulation-refresher",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "Section 1: Data Manipulation Refresher",
    "text": "Section 1: Data Manipulation Refresher\n\nReview of a Join Function: Demonstrating how to merge datasets in R.\nBind Rows: Combining multiple datasets.\nFilter Function: Extracting specific data based on conditions.\nGroup By and Summarize: Aggregating data for meaningful insights."
  },
  {
    "objectID": "outline.html#section-2-understanding-ggplot-and-layers",
    "href": "outline.html#section-2-understanding-ggplot-and-layers",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "Section 2: Understanding ggplot and Layers",
    "text": "Section 2: Understanding ggplot and Layers\n\nIntroduction to ggplot: Basic concepts and syntax.\nExploring Layers in ggplot: How layers work to build a plot."
  },
  {
    "objectID": "outline.html#section-3-working-with-data-frames",
    "href": "outline.html#section-3-working-with-data-frames",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "Section 3: Working with Data Frames",
    "text": "Section 3: Working with Data Frames\n\nData Frame Structure: Understanding rows and columns in the context of datasets.\nVariables and Plot Types: How variable types dictate the choice of plots."
  },
  {
    "objectID": "outline.html#section-4-case-study---music-data-analysis",
    "href": "outline.html#section-4-case-study---music-data-analysis",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "Section 4: Case Study - Music Data Analysis",
    "text": "Section 4: Case Study - Music Data Analysis\n\nDataset Introduction: Spotify data on The Beatles, The Rolling Stones, and The Monkees.\nInteractive Coding: Participants modify code to explore different ggplot functions:\n\ngeom_bar\ngeom_violin\ngeom_boxplot\ngeom_point"
  },
  {
    "objectID": "outline.html#section-5-hands-on-exercise",
    "href": "outline.html#section-5-hands-on-exercise",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "Section 5: Hands-on Exercise",
    "text": "Section 5: Hands-on Exercise\n\nTask: Observers will engage in programming a simple plot.\nVariables of Interest: Number of Songs, Number of Albums, Valence, and Energy.\nObjective: Understanding the practical application of ggplot in visualizing data."
  },
  {
    "objectID": "outline.html#conclusion",
    "href": "outline.html#conclusion",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "Conclusion",
    "text": "Conclusion\n\nRecap of Key Points: Summarizing what was covered in the demonstration.\nQ&A Session: Open floor for questions and clarifications.\nConnecting to Course Objectives: Relating the demonstration back to CS 123’s objectives of understanding computational art, teamwork, and developing a personal aesthetic in digital creations."
  },
  {
    "objectID": "outline.html#references",
    "href": "outline.html#references",
    "title": "CS 123 Teaching Demonstration: Data Visualization with ggplot in R",
    "section": "References",
    "text": "References\n\nggplot Documentation: [Link to ggplot resources]\nSpotify Dataset Source: [Link to the dataset used]"
  },
  {
    "objectID": "index.html#review-of-the-extract-transform",
    "href": "index.html#review-of-the-extract-transform",
    "title": "Initial Principles of Data Visualizations",
    "section": "Review of the Extract & Transform",
    "text": "Review of the Extract & Transform\n\n\n\n\n\n\nGet & Clean\n\n\n\n\n\nETV\n\nHow did we get this data?\n\nExtraction of Data:\nWe extracted data using the Spotify API and transformed it using various dplyr functions. Review Extraction and Transformation Process.\n\n\n\nHow did we clean this data?\n\nTransformation of Data:\n\nBind Rows: Combining all_tracks_df. See this section of the notes for more details.\nFilter Function: Filtering data in all_tracks_cleaned_df. Refer to this section of the notes for additional information.\nGroup By and Summarize: Demonstrating these processes with album_info_df and artist_overview_df. Further details can be found in this section of the notes.\n\n\n\n\n\nLet’s load the data\n\n# Load the data from the R data file\nload(\"music_data.rda\")\n\n\nstr(album_info_df)\n\ntibble [106 × 7] (S3: tbl_df/tbl/data.frame)\n $ artist_name       : chr [1:106] \"The Beatles\" \"The Beatles\" \"The Beatles\" \"The Beatles\" ...\n $ album_name        : chr [1:106] \"A Hard Day's Night (Remastered)\" \"Abbey Road (Remastered)\" \"Abbey Road (Super Deluxe Edition)\" \"Beatles For Sale (Remastered)\" ...\n $ album_release_year: num [1:106] 1964 1969 2019 1964 2022 ...\n $ Energy            : num [1:106] 0.61 0.457 0.46 0.596 0.389 ...\n $ Valence           : num [1:106] 0.761 0.459 0.458 0.812 0.898 ...\n $ Number_of_Songs   : int [1:106] 13 17 7 14 1 14 12 17 1 53 ...\n $ album_age         : num [1:106] 60 55 5 60 2 59 54 3 10 30 ..."
  },
  {
    "objectID": "index.html#but-wait-we-have-to-understand",
    "href": "index.html#but-wait-we-have-to-understand",
    "title": "Initial Principles of Data Visualizations",
    "section": "But wait … we have to understand",
    "text": "But wait … we have to understand"
  },
  {
    "objectID": "index.html#lets-load-the-data",
    "href": "index.html#lets-load-the-data",
    "title": "Initial Principles of Data Visualizations",
    "section": "Let’s load the data",
    "text": "Let’s load the data\n\n# Load the data from the R data file\nload(\"music_data.rda\")\n\n\nstr(album_info_df)\n\ntibble [106 × 7] (S3: tbl_df/tbl/data.frame)\n $ artist_name       : chr [1:106] \"The Beatles\" \"The Beatles\" \"The Beatles\" \"The Beatles\" ...\n $ album_name        : chr [1:106] \"A Hard Day's Night (Remastered)\" \"Abbey Road (Remastered)\" \"Abbey Road (Super Deluxe Edition)\" \"Beatles For Sale (Remastered)\" ...\n $ album_release_year: num [1:106] 1964 1969 2019 1964 2022 ...\n $ Energy            : num [1:106] 0.61 0.457 0.46 0.596 0.389 ...\n $ Valence           : num [1:106] 0.761 0.459 0.458 0.812 0.898 ...\n $ Number_of_Songs   : int [1:106] 13 17 7 14 1 14 12 17 1 53 ...\n $ album_age         : num [1:106] 60 55 5 60 2 59 54 3 10 30 ..."
  },
  {
    "objectID": "index.html#introduction-to-the-package-ggplot2",
    "href": "index.html#introduction-to-the-package-ggplot2",
    "title": "Initial Principles of Data Visualizations",
    "section": "Introduction to the package ggplot2",
    "text": "Introduction to the package ggplot2\n\n\n\n\n\n\nggplot2\n\n\n\n\n\nIn this module, we will explore how to create visualizations using the ggplot2 package in R.\nWe’ll focus on understanding:\n\ngeoms: the different types of geometric objects\nSummary Statistics: The stat_summary function can calculate summary statistics (like mean, median, min, max, etc.) for each group of data\nGuides: the importance of labels and titles in making plots informative."
  },
  {
    "objectID": "index.html#lets-visualize-using-ggplot",
    "href": "index.html#lets-visualize-using-ggplot",
    "title": "Initial Principles of Data Visualizations",
    "section": "0. Lets visualize using ggplot",
    "text": "0. Lets visualize using ggplot\n\n\n\n\n\n\nThe power of ggplot2\n\n\n\n\n\n\nThe ggplot2 package in R is a powerful and flexible system for creating data visualizations.\nBuilt upon the principles of the Grammar of Graphics, it allows users to construct plots by layering components systematically.\nggplot2 is renowned for its ability to handle complex visualization tasks, offering a wide range of plot types and customization options.\n\n\nlibrary(ggplot2)\n\n\nggplot(data = album_info_df)\n\n\n\n\n\n\n\n\nNow that we have the data, …\nWe must specify the variable(s) that we are interested to create a visualization."
  },
  {
    "objectID": "index.html#geoms",
    "href": "index.html#geoms",
    "title": "Initial Principles of Data Visualizations",
    "section": "1. geoms",
    "text": "1. geoms\n\n\n\n\n\n\nImportance of Variables\n\n\n\n\n\n\nBut wait … we have to understand\n\n\nVariables\nTypically, I determine:\n\nWhat your question?\nHow many variables are in your question?\nWhat are the variable types? Strings or numeric.\n\nBased on this information we can then determine how we can represent that information in a visualization.\n\n\ngeoms in ggplot2\nDefinition: geoms (geometric objects) are the visual representations of data in ggplot2. Examples include points, lines, and bars.\nDepending on the type of data and the story we want to tell, we choose different geoms.\n\n\n\n\n\n\nInvestigating Count Data - geom_bar\n\n\n\n\n\n\nWhat your question?\n\nWhich group had the most albums?\n\nHow many variables are in your question?\n\n2\n\nWhat are the variable types? Strings or numeric.\n\nType of Data: One or more variables that are strings (e.g., “Artist”)\nFill out the code as I explain each element of the code\n\n\n# # Bar plot to show the number of albums per artist\n# ggplot(data = album_info_df, \n# mapping = aes(\n# x = artist_name, \n#   y = Number_of_Albums)) +\n#   geom_bar(stat = 'count') \n\n\nSooo… Which group had the most albums?\n\n\n\n\n\n\n\n\n\n\n\nInvestigating Numeric Data - geom_boxplot\n\n\n\n\n\n\nWhat your question?\n\nWhat were the energy levels of each group’s albums?\n\nHow many variables are in your question? 2\nWhat are the variable types? Strings or numeric.\n\nType of Data: One string variable (Artist) and one numeric variable (Energy)\nFill out the code as I explain each element of the code\n\nCode and Visualization\n\n# Boxplot to show the distribution of energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_boxplot() \n\n\n\n\n\nSooo… What were the energy levels of each group’s albums?\n\n\n\ntalk about limitation to boxplot, you can add relatve sample size\nask students to look up violin plot\ntheir ability to look up help page\nwhat did you learn from these visualizations\nspecify what energy is measured and it was aggregated by album\n\nThis visualization will help us see the median, IQR, and skewness of numeric data.\nYou can investigate more geoms here.\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\nQuestion 1:\nConvert a boxplot to a violin plot using the geom_violin() function. [Code]\n\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin()\n\n\n\n\n\n\nQuestion 2:\nWhat do you notice about the violin plot compared to the boxplot? [Multiple Choice]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. Stats within ggplot\n\n\n\n\n\n\nDefinition: In ggplot2, stats are key elements that help summarize and represent data. They allow us to visualize the central tendency or the most typical value in the data. One of the functions used for this purpose is stat_summary().\nWe will use stat_summary() in conjunction with geom_violin() to enhance our violin plot. By applying stat_summary(), we can overlay summary statistics, such as mean or median, on the violin plot created from all_tracks_cleaned_df.\nThis approach not only visualizes the distribution of energy levels across different artist groups but also marks key statistical indicators for more insightful data interpretation.\n\n\nCode and Visualization\n\n# Enhanced Violin plot with summary statistics for energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin() +\n  stat_summary(fun = mean, geom = \"point\", shape = 20, size = 6, color = \"black\")\n\n\n\n\n\nadding appropriate labels and titles can answer the research question which will tell\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\nQuestion 3: Adding Summary Statistics to Geoms\n\nComplete the code to overlay text on the bars using geom_text().[Code]\nHow many albums do The Monkees have? [Numeric]\n\n\n\nQuestion 4:\nWhat are the advantages of displaying numerical values on each bar in a bar chart? [Multiple Answers]\n\n\n\n\n\n\n\n\n\n\n\n\n\n3. Guide: Legends and Annotations\n\n\n\n\n\n\nDefinition: In ggplot2, guides are critical elements that enhance the interpretability of a plot. They include legends, axes labels, titles, and other annotations, serving as navigational tools that provide context and improve readability.\nTo demonstrate the importance of guides, we will enhance a scatter plot created from album_info_df.\n\n\nCode and Visualization\n\n# Example code for adding labels to a plot\nggplot(data = album_info_df , aes(x = Energy, y = Valence)) +\n  geom_point() +\n  labs(\n    title = \"Energy vs Valence: Exploring Album Characteristics\",\n    subtitle = \"A scatter plot illustrating the relationship between energy and valence in albums\",\n    x = \"Energy\",\n    y = \"Valence\"\n  )\n\n\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\n\n\nQuestion 5: Enhancing Plots with Labels\nWe are creating a scatter plot with geom_point using the variables album_age and Number_of_Songs. Edit the code to include a title, axis labels, and a legend title that match the ones in the provided plot. Specifically, set the title to ‘Album Age vs Number of Songs: A Comparative Analysis’, the subtitle to ‘Scatter plot illustrating the correlation between album age and number of songs across artists’, the x-axis label to ‘Album Age (Years)’, the y-axis label to ‘Number of Songs’, and the color legend title to ‘Artist Name’. [Code]\n\n# Your code to add labels to a scatter plot goes here\nggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +\n  geom_point() +\n  labs(\n    title = \"Plot Title: Relationship Between X and Y\",\n    subtitle = \"Information about plot\",\n    x = \"X Variable Name\",\n    y = \"Y Variable Name\",\n    color = \"Legend Name\"\n  )\n\n\n\n\n\n# Your code to add labels to a scatter plot goes here\nggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +\n  geom_point() +\n  labs(\n    title = \"Album Age vs Number of Songs: A Comparative Analysis\",\n    subtitle = \"Scatter plot illustrating the correlation between album age and number of songs across artists\",\n    x = \"Album Age (Years)\",\n    y = \"Number of Songs\",\n    color = \"Artist Name\"\n  )\n\n\n\n\n\n\nQuestion 6: The Importance of Labels\nWhat are some potential consequences of not including proper labels on our plots? Select all that apply. [Multiple Answers]\n\ndo not include the scatter plot\ncode live or have students di it\nintention with colors discussion\ncolor coding and faceting based on artist\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\n\nToday’s exploration of the ggplot2 package in R has taken us through the intricacies of Geoms, Stats, and Guides. We’ve utilized all_tracks_cleaned_df, album_info_df, and artist_overview_df to demonstrate the creation of compelling visualizations, from basic bar charts to insightful violin and scatter plots.\n\ngeoms showed the diverse ways data can be visually represented.\nStats added a layer of depth by integrating statistical summaries.\nGuides enhanced our plots with clear legends and annotations, making them informative and accessible."
  }
]