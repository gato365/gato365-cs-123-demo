---
title: "CS 123 Teaching Demonstration"
---


## Let'a analyze these artists

<!-- ![](images/music_groups.jpg){width="375",height="425"} -->
<img src="images/music_groups.jpg" alt="alt text" width="375" height="425"/>


```{r setup }
#| include: false

```

::: {.callout-note collapse="true"}
## Review of the Extract-Transform (E-T) Process

### **How did we get this data?**

#### **Extraction of Data:**

We extracted data using the Spotify API and transformed it using various dplyr functions. [Link to Extraction and Transformation Process](extract_transform.html). Additionally, [here's a reference to research presented at a conference](https://www.causeweb.org/usproc/eusr/2022/virtual-posters/9) of Extraction Transformation Visualization (ETV) a teaching data science technique.

#### **Transformation of Data:**

-   `Bind Rows`: Combining `all_tracks_df`. [See this section of the notes for more details]().

-   `Filter Function`: Filtering data in `all_tracks_cleaned_df`. [Refer to this section of the notes for additional information]().

-   `Group By and Summarize`: Demonstrating these processes with `album_info_df` and `artist_overview_df`. [Further details can be found in this section of the notes]().

We are going to load the data from our previous work with following code:

```{r}
# Load the data from the R data file
load("music_data.rda")
```

```{r}
#| include: false

album_info_df <- dplyr::mutate(album_info_df, album_age = 2024 - album_release_year)
```
:::

::: {.callout-note collapse="true"}
# Introduction

In this module, we will explore how to create visualizations using the `ggplot2` package in R.

We'll focus on understanding:

-   geoms: the different types of geometric objects

-   Summary Statistics: The stat_summary function can calculate summary statistics (like mean, median, min, max, etc.) for each group of data

-   The importance of labels in making plots informative.
:::

::: {.callout-note collapse="true"}
## 0. Lets Visualize using ggplot

-   The ggplot2 package in R is a powerful and flexible system for creating data visualizations.

-   Built upon the principles of the Grammar of Graphics, it allows users to construct plots by layering components systematically.

-   ggplot2 is renowned for its ability to handle complex visualization tasks with ease, offering a wide range of plot types and customization options.

```{r}
#| message: false
#| warning: false

library(ggplot2)
```

```{r}
#| fig-align: center
ggplot(data = all_tracks_cleaned_df)
```

**Now that we have the data, we must specify the variable(s) that we are interested to create a visualization.**
:::

::: {.callout-note collapse="true"}
# 1. **Understanding Geoms**

**Definition**: Geoms (geometric objects) are the visual representations of data in ggplot2. Examples include points, lines, and bars.

## **But wait ... we have to understand**

## Variables

Typically, I determine:

1.  What is/are variable(s) that are in your question.

2.  How many variables are you investigating?

3.  What are the variable types? Strings or numeric.

Based on this information we can then determine how we can represent that information in a visualization.

## geoms in ggplot2

geoms, or geometric objects, are the fundamental visual representations of data in ggplot2.

Depending on the type of data and the story we want to tell, we choose different geoms.

::: {.callout-note collapse="true"}
### Investigating Count Data - geom_bar

#### *Which group had the most albums?*

**Type of Data**: One or more variables that are strings (e.g., "Artist")

We'll create a bar plot using `geom_bar()` with the `artist_overview_df` data frame to visualize the count of albums by each artist group.

::: {.custom-class collapse="true"}
```{r}

# Bar plot to show the number of albums per artist
ggplot(artist_overview_df, aes(x = artist_name, y = Number_of_Albums)) +
  geom_bar(stat = 'identity') 
```

This visualization will help us see which artist group released the most albums.
:::
:::

::: {.callout-note collapse="true"}
### Investigating Numeric Data - geom_boxplot

#### *What were the energy levels of each group?*

**Type of Data**: One string variable (Artist) and one numeric variable (Energy)

Using `geom_boxplot()` with the `all_tracks_cleaned_df`, we'll create a boxplot to visualize the distribution of energy levels across different artist groups.

::: {.custom-class collapse="true"}
## Code and Visualization

```{r}
# Boxplot to show the distribution of energy levels per artist
ggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +
  geom_boxplot() 
```
:::

This visualization will help us see the median, IQR, and skewness of numeric data.

You can investigate more geoms [here](https://ggplot2.tidyverse.org/reference/).
:::

::: {.callout-note collapse="true"}
# Questions

## Question 1:

Convert a boxplot to a violin plot using the `geom_violin()` function. \[Code\]

```{r}
ggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +
  geom_violin()
```

## Question 2:

What do you notice about the violin plot compared to the boxplot? \[Multiple Choice\]
:::
:::

::: {.callout-note collapse="true"}
# 2. Exploring Stats within ggplot

-   **Definition**: In ggplot2, stats are key elements that help summarize and represent data. They allow us to visualize the central tendency or the most typical value in the data. One of the functions used for this purpose is stat_summary().

-   We will use `stat_summary()` in conjunction with `geom_violin()` to enhance our violin plot. By applying `stat_summary()`, we can overlay summary statistics, such as mean or median, on the violin plot created from `all_tracks_cleaned_df`.

-   This approach not only visualizes the distribution of energy levels across different artist groups but also marks key statistical indicators for more insightful data interpretation.

::: {.custom-class collapse="true"}
# Code and Visualization

```{r}
# Enhanced Violin plot with summary statistics for energy levels per artist
ggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +
  geom_violin() +
  stat_summary(fun = mean, geom = "point", shape = 20, size = 6, color = "black")
```
:::

::: {.callout-note collapse="true"}
# Questions

## Question 3: Adding Summary Statistics to Geoms

a.  Complete the code to overlay text on the bars using geom_text().\[Code\]

b.  How many albums do The Monkees have? \[Numeric\]

## Question 4:

What are the advantages of displaying numerical values on each bar in a bar chart? \[Multiple Answers\]
:::
:::

::: {.callout-note collapse="true"}
# 3. Guide: Legends and Annotations

-   **Definition**: In ggplot2, guides are critical elements that enhance the interpretability of a plot. They include legends, axes labels, titles, and other annotations, serving as navigational tools that provide context and improve readability.

-   To demonstrate the importance of guides, we will enhance a scatter plot created from `album_info_df`.

::: {.custom-class collapse="true"}
## Code and Visualization

```{r}
# Example code for adding labels to a plot
ggplot(data = album_info_df , aes(x = Energy, y = Valence)) +
  geom_point() +
  labs(
    title = "Energy vs Valence: Exploring Album Characteristics",
    subtitle = "A scatter plot illustrating the relationship between energy and valence in albums",
    x = "Energy",
    y = "Valence"
  )

```
:::

::: {.callout-note collapse="true"}
# Questions

### Question 5: Enhancing Plots with Labels

We are creating a scatter plot with `geom_point` using the variables `album_age` and `Number_of_Songs`. Edit the code to include a title, axis labels, and a legend title that match the ones in the provided plot. Specifically, set the title to 'Album Age vs Number of Songs: A Comparative Analysis', the subtitle to 'Scatter plot illustrating the correlation between album age and number of songs across artists', the x-axis label to 'Album Age (Years)', the y-axis label to 'Number of Songs', and the color legend title to 'Artist Name'. \[Code\]

```{r}
# Your code to add labels to a scatter plot goes here
ggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +
  geom_point() +
  labs(
    title = "Plot Title: Relationship Between X and Y",
    subtitle = "Information about plot",
    x = "X Variable Name",
    y = "Y Variable Name",
    color = "Legend Name"
  )
```

```{r}
# Your code to add labels to a scatter plot goes here
ggplot(data = album_info_df, aes(x = album_age, y = Number_of_Songs, color = artist_name)) +
  geom_point() +
  labs(
    title = "Album Age vs Number of Songs: A Comparative Analysis",
    subtitle = "Scatter plot illustrating the correlation between album age and number of songs across artists",
    x = "Album Age (Years)",
    y = "Number of Songs",
    color = "Artist Name"
  )
```

### Question 6: The Importance of Labels

What are some potential consequences of not including proper labels on our plots? Select all that apply. \[Multiple Answers\]
:::
:::

::: {.callout-note collapse="true"}
# Conclusion

Today's exploration of the ggplot2 package in R has taken us through the intricacies of Geoms, Stats, and Guides. We've utilized `all_tracks_cleaned_df`, `album_info_df`, and `artist_overview_df` to demonstrate the creation of compelling visualizations, from basic bar charts to insightful violin and scatter plots.

-   **geoms** showed the diverse ways data can be visually represented.

-   **Stats** added a layer of depth by integrating statistical summaries.

-   **Guides** enhanced our plots with clear legends and annotations, making them informative and accessible.
:::
