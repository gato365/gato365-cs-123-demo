---
title: "CS 123 Teaching Demonstration"
---

```{r setup }
#| include: false

```

::: {.callout-note collapse="true"}
## Review of the Extract-Transform (E-T) Process

### *How did we get this data?*

-   **Overview**: We extracted data using the Spotify API and transformed it using various dplyr functions. [Link to Extraction and Transformation Process](extract_transform.html). Additionally, [here's a reference to research presented at a conference](https://www.causeweb.org/usproc/eusr/2022/virtual-posters/9) of Extraction Transformation Visualization (ETV) a teaching data science technique.

-   **Illustration with Data**:

-   `Bind Rows`: Combining `all_tracks_df`. [See this section of the notes for more details]().

-   `Filter Function`: Filtering data in `all_tracks_cleaned_df`. [Refer to this section of the notes for additional information]().

-   `Group By and Summarize`: Demonstrating these processes with `album_info_df` and `artist_overview_df`. [Further details can be found in this section of the notes]().

We are going to load the data from our previous work with following code:

```{r}
# Load the data from the R data file
load("music_data.rda")
```
:::

::: {.callout-note collapse="true"}
## 0. Lets Visualize using ggplot

```{r}
#| message: false

library(ggplot2)
```

```{r}
ggplot(data = all_tracks_cleaned_df)
```

-   The ggplot2 package in R is a powerful and flexible system for creating data visualizations.

-   Built upon the principles of the Grammar of Graphics, it allows users to construct plots by layering components systematically.

-   ggplot2 is renowned for its ability to handle complex visualization tasks with ease, offering a wide range of plot types and customization options.
:::

::: {.callout-note collapse="true"}
## 1. **Understanding geoms**

**Definition**: geoms (geometric objects) are the visual representations of data in ggplot2. Examples include points, lines, and bars.

**Illustration with Data**:

::: {.callout-note collapse="true"}
### Investigating Count Data - geom_bar

#### *Which group had the most albums?*

**Type of Data**: One or more categorical variables (e.g., "Artist")

We'll create a bar plot using `geom_bar()` with the `artist_overview_df` data frame to visualize the count of albums by each artist group.

```{r}

# Bar plot to show the number of albums per artist
ggplot(artist_overview_df, aes(x = artist_name, y = Number_of_Albums)) +
  geom_bar(stat = 'identity') 
```

This visualization will help us see which artist group released the most albums.
:::

::: {.callout-note collapse="true"}
### Investigating the Distribution - geom_violin

#### *What were the energy levels of each group?*

**Type of Data**: One categorical variable (Artist) and one numeric variable (Energy)

Using `geom_violin()` with the `all_tracks_cleaned_df`, we'll create a violin plot to visualize the distribution of energy levels across different artist groups.

```{r}
# Violin plot to show the distribution of energy levels per artist
ggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +
  geom_violin() +
  theme_minimal() +
  labs(title = "Distribution of Energy Levels by Artist",
       x = "Artist",
       y = "Energy Level")
```

A violin plot is chosen here because it not only shows the distribution but also the density of the data points, giving a clearer picture than a boxplot.
:::

::: {.callout-note collapse="true"}
### Investigating a Relationship - geom_point

#### *What is the relationship between energy levels and valence across groups?*

First, we'll create a scatter plot using `geom_point()` with `album_info_df` to explore the relationship between energy levels and valence without specifying artists.

```{r}
# Scatter plot for energy levels vs valence
ggplot(album_info_df, aes(x = Energy, y = Valence)) +
  geom_point() +
  theme_minimal() +
  labs(title = "Relationship Between Energy Levels and Valence",
       x = "Energy",
       y = "Valence")
```

You can investigate more geoms [here](https://ggplot2.tidyverse.org/reference/).
:::

::: {.callout-note collapse="true"}
### In Class Practice

Turn this into a question in which the student is asked to use color = artist_name """ Next, we'll add the artist specification to the plot for a more detailed analysis.

```{r}
# Scatter plot with artist specification
ggplot(album_info_df, aes(x = Energy, y = Valence, color = artist_name)) +
  geom_point() +
  theme_minimal() +
  labs(title = "Energy Levels vs Valence by Artist",
       x = "Energy",
       y = "Valence")
```

This approach allows us to first observe the general trend and then delve deeper into how this relationship might differ across different artist groups.
:::
:::

::: {.callout-note collapse="true"}
## 2. Exploring Stats within ggplot

-   **Definition**: In ggplot2, Stats (statistical transformations) are fundamental components that transform and summarize data.

-   These transformations include basic tasks like counting occurrences, to more complex operations like calculating means or medians, making them crucial for data analysis and interpretation.

-   **Illustration with Data**:

-   We will use `stat_summary()` in conjunction with `geom_violin()` to enhance our violin plot. By applying `stat_summary()`, we can overlay summary statistics, such as mean or median, on the violin plot created from `all_tracks_cleaned_df`.

-   This approach not only visualizes the distribution of energy levels across different artist groups but also marks key statistical indicators for more insightful data interpretation.

```{r}
# Enhanced Violin plot with summary statistics for energy levels per artist
ggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +
  geom_violin() +
  stat_summary(fun = mean, geom = "point", shape = 20, size = 3, color = "black") +
  theme_minimal() +
  labs(title = "Distribution of Energy Levels by Artist with Statistical Summary",
       x = "Artist",
       y = "Energy Level")
```

-   In this code snippet, `stat_summary()` is used to plot the mean energy levels as points on the violin plot.

-   The `mean` function calculates the average energy level for each artist, and the resulting point is plotted on top of the corresponding violin plot.

-   This enhancement provides a clear visual indicator of the central tendency of the energy distribution for each artist, adding depth to our data analysis.
:::

::: {.callout-note collapse="true"}
### In Class Practice
:::

::: {.callout-note collapse="true"}
## Conclusion

Today's exploration of the ggplot2 package in R has taken us through the intricacies of geoms, Stats, and Guides. We've utilized `all_tracks_cleaned_df`, `album_info_df`, and `artist_overview_df` to demonstrate the creation of compelling visualizations, from basic bar charts to insightful violin and scatter plots.

-   **geoms** showed the diverse ways data can be visually represented.
-   **Stats** added a layer of depth by integrating statistical summaries.\
-   **Guides** enhanced our plots with clear legends and annotations, making them informative and accessible.

This session aimed to not only broaden your understanding of ggplot2 but also to inspire its application in your data storytelling endeavors. Thank you for your engagement, and I encourage you to continue exploring the vast potential of data visualization.
:::

::: {.callout-note collapse="true"}
# Need to clean

### Question 1: geoms

**Prompt:** Using the `mtcars` dataset, create a ggplot2 scatter plot (`geom_point`) to visualize the relationship between `mpg` (miles per gallon) and `hp` (horsepower). Assign your plot to the variable `p1`.

```{r question1, exercise=TRUE}

```

**Solution:**

```{r}
p1 <- ggplot(mtcars, aes(x = mpg, y = hp)) +
  geom_point()
```

```{r}
# grade_this_code()(
#   pass_if(~ identical(.result, p1),
#           "Excellent work! Your scatter plot correctly visualizes the relationship between mpg and hp."),
#   fail_if(~ !inherits(.result, "ggplot"),
#           "Make sure you are using ggplot2 for plotting."),
#   fail("Your plot does not match the expected output. Check your aes() mappings.")
# )
```

------------------------------------------------------------------------

### Question 2: stat_summary

**Prompt:** Create a ggplot2 visualization using the `mtcars` dataset that displays the average `mpg` for each cylinder group (`cyl`). Use `geom_bar()` and `stat_summary()` to achieve this. Store your plot in the variable `p2`.

```{r question2, exercise=TRUE}

```

**Solution:**

```{r}
p2 <- ggplot(mtcars, aes(x = factor(cyl))) +
  geom_bar(stat = "summary", fun = mean)
```

**gradethis Code:**

```{r}
# grade_this_code()(
#   pass_if(~ identical(.result, p2),
#           "Well done! Your plot correctly shows the average mpg for each cylinder group."),
#   fail_if(~ !("summary" %in% sapply(.result$layers, function(x) x$stat)),
#           "Remember to use stat='summary' in geom_bar."),
#   fail("Your plot doesn't seem to be correct. Ensure you're using the mean function for stat_summary.")
# )
```

### Question 3: Labels

```{r question3, exercise=TRUE}

```

**Prompt:** Using the `mtcars` dataset, create a ggplot2 scatter plot of `mpg` vs `wt` (weight). Add labels for the x-axis ("Miles per Gallon"), y-axis ("Weight (1000 lbs)"), and the plot title ("MPG vs Weight"). Save this plot as `p3`.

**Solution:**

```{r}
p3 <- ggplot(mtcars, aes(x = mpg, y = wt)) +
  geom_point() +
  labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight (1000 lbs)")
```

**gradethis Code:**

```{r}
# grade_this_code()(
#   pass_if(~ identical(.result, p3),
#           "Great job! Your labels are correctly added to the scatter plot."),
#   fail_if(~ any(c("Miles per Gallon", "Weight (1000 lbs)", "MPG vs Weight") %in% c(.result$labels$title, .result$labels$x, .result$labels$y)),
#           "Check if you've added all the required labels correctly."),
#   fail("There seems to be an issue with your plot. Review the labels and try again.")
# )
```
:::
