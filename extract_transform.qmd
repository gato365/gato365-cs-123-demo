---
title: "Data Extraction and Manipulation"
author: "Immanuel Williams PhD"
---

To facilitate the tasks you've outlined, we'll use the `spotifyr` package in R. This package is a great tool for accessing Spotify's Web API and can help us gather and manipulate data related to artists, albums, and tracks. Below, I'll provide you with R code snippets for each of your tasks.

Before you begin, ensure that you have the `spotifyr` package installed and loaded, and that you have valid Spotify API credentials (Client ID and Client Secret). Replace `"xxxxxxxxxxxxxxxxxxxxx"` with your actual credentials.

## **Task 1: Get Tracks from The Beatles, The Rolling Stones, and The Monkees**

### 1. **Load the `spotifyr` Library and Authenticate:** {#extract}

```{r}
#| message: false
#| warning: false

library(spotifyr)
library(tidyverse)
```

```{r}
#| eval: false

# Load environment variables
client_id <- Sys.getenv("SPOTIFY_CLIENT_ID")
client_secret <- Sys.getenv("SPOTIFY_CLIENT_SECRET")

# Authenticate using the loaded credentials
# Authenticate using the credentials stored in environment variables
access_token <- get_spotify_access_token()


kendrick_lamar_df <- get_artist_audio_features("Kendrick Lamar")
save(kendrick_lamar_df, file = "kendrick_lamar_df.rda")
```

### 2. **Get Data for Each Artist and Bind Rows:** {#bind}

```{r}
#| eval: false

beatles_tracks_df <- get_artist_audio_features("The Beatles")
rolling_stones_tracks_df <- get_artist_audio_features("The Rolling Stones")
monkees_tracks_df <- get_artist_audio_features("The Monkees")

all_tracks_df <- bind_rows(beatles_tracks_df, rolling_stones_tracks_df, monkees_tracks_df)
```

### 3. **Filter Out Duplicates and Irrelevant Data:** {#filter}

Here, you'll need to decide what constitutes an irrelevant track. For simplicity, I'm removing duplicates based on track IDs.

```{r}
#| eval: false



all_tracks_cleaned_df <- all_tracks_df %>% 
  mutate(simple_track_name = str_extract(track_name, "^[^-]*"),
         album_age = 2024 - album_release_year) %>% 
  arrange(simple_track_name, album_age) %>%
  distinct(simple_track_name, .keep_all = TRUE)

  
```

## **Task 2: Aggregate Information Based on Album and Artist**

### 1. **Group by Album and Artist:** {#groupby}

Aggregate data to get Energy, Valence, Number of Songs per Album, and Album Year.

```{r}
#| eval: false

album_info_df <- all_tracks_cleaned_df %>% 
group_by(artist_name, album_name, album_release_year) %>%
summarise(energy = mean(energy),
valence = mean(valence),
Number_of_Songs = n(),
.groups = 'drop')
```

### 2. **Create an Overall Data Frame for Each Artist:**

This Data Frame will show the number of songs, number of albums, and other noteworthy variables for each artist.

```{r}
#| eval: false

artist_overview <- all_tracks_cleaned %>% 
group_by(artist_name) %>%
summarise(Number_of_Songs = n(),
Number_of_Albums = n_distinct(album_name),
Average_Energy = mean(energy),
Average_Valence = mean(valence),
.groups = 'drop')
```

### 3. Determine the number of albums

```{r}
#| eval: false

album_counts_df <- all_tracks_cleaned_df %>%
  group_by(artist_name) %>%
  summarise(album_count = n_distinct(album_name)) %>%
  arrange(desc(album_count))
```

Please note that this code is a general guide. The exact specifications, like what constitutes a duplicate or irrelevant track, may need to be adjusted based on your specific requirements and the structure of the data returned by the Spotify API. Additionally, be aware of any rate limits or restrictions imposed by the Spotify API.

```{r}
#| eval: false

save(album_counts_df, album_info_df, file = "music_data.rda")
```
