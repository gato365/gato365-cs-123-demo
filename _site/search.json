[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS 123 Teaching Demo",
    "section": "",
    "text": "# Load the data from the R data file\nload(\"music_data.rda\")"
  },
  {
    "objectID": "index.html#learning-objectives",
    "href": "index.html#learning-objectives",
    "title": "CS 123 Teaching Demo",
    "section": "Learning Objectives:",
    "text": "Learning Objectives:\n\nWho had more energy The Rolling Stones, The Beatles and The Monkees?\n\nggplot: Layered Approach\n\n\nDescription: ggplot builds plots using a layered approach. Each layer adds a new element to the plot, making complex visualizations achievable through simple building blocks.\n\n\nGeom: Visual Representation\n\n\nDescription: Geoms (geometric objects) are the heart of a ggplot plot. They provide the visual representations of data.\nExamples:\nPoints for scatter plots\nBoxplots and Violin Plots for showing distributions and comparing groups\nBars for bar charts\n\n\nStat: Statistical Transformations\n\n\nDescription: Statistical transformations (Stats) process your data to create summaries or perform calculations.\nKey Concepts:\nCounting data points\nSummarizing datasets\n\n\nGuide: Annotations and Legends\n\n\nDescription: Guides include all the necessary annotations to make a plot readable and informative.\nElements:\nLegends to explain scales\nAxis labels for clarity\nTitle and subtitles for context"
  },
  {
    "objectID": "index.html#review-of-e---t-process",
    "href": "index.html#review-of-e---t-process",
    "title": "cs-123-teaching-demo",
    "section": "Review of E - T Process",
    "text": "Review of E - T Process\n\nGot data using Spotify API\nTransformed data via\n\nBind Rows: Combining multiple datasets.\nFilter Function: Extracting specific data based on conditions.\nGroup By and Summarize: Aggregating data for meaningful insights.\n\n\n\nstr(album_info_df)\n\nClasses 'tbl_df', 'tbl' and 'data.frame':   106 obs. of  6 variables:\n $ artist_name       : chr  \"The Beatles\" \"The Beatles\" \"The Beatles\" \"The Beatles\" ...\n $ album_name        : chr  \"A Hard Day's Night (Remastered)\" \"Abbey Road (Remastered)\" \"Abbey Road (Super Deluxe Edition)\" \"Beatles For Sale (Remastered)\" ...\n $ album_release_year: num  1964 1969 2019 1964 2022 ...\n $ Energy            : num  0.61 0.457 0.46 0.596 0.389 ...\n $ Valence           : num  0.761 0.459 0.458 0.812 0.898 ...\n $ Number_of_Songs   : int  13 17 7 14 1 14 12 17 1 53 ...\n\n\n\nstr(all_tracks_cleaned_df)\n\nClasses 'tbl_df', 'tbl' and 'data.frame':   1060 obs. of  37 variables:\n $ artist_name                 : chr  \"The Rolling Stones\" \"The Monkees\" \"The Monkees\" \"The Monkees\" ...\n $ artist_id                   : chr  \"22bE4uQ6baNwSHPVcDxLCe\" \"320EPCSEezHt1rtbfwH6Ck\" \"320EPCSEezHt1rtbfwH6Ck\" \"320EPCSEezHt1rtbfwH6Ck\" ...\n $ album_id                    : chr  \"2Q5MwpTmtjscaS34mJFXQQ\" \"1q1LuLo92N5cl5e0GKRq7h\" \"3PAXAQRjNdu46OTGgnrGpG\" \"3PAXAQRjNdu46OTGgnrGpG\" ...\n $ album_type                  : chr  \"album\" \"album\" \"album\" \"album\" ...\n $ album_release_date          : Date, format: \"1965-07-30\" \"1966-10-10\" ...\n $ album_release_year          : num  1965 1966 1987 1987 1967 ...\n $ album_release_date_precision: chr  \"day\" \"day\" \"day\" \"day\" ...\n $ danceability                : num  0.723 0.548 0.646 0.491 0.537 0.456 0.411 0.409 0 0.313 ...\n $ energy                      : num  0.863 0.451 0.599 0.272 0.677 0.692 0.84 0.799 0.0923 0.912 ...\n $ key                         : int  2 6 7 9 5 7 9 2 8 4 ...\n $ loudness                    : num  -7.89 -9.61 -9.36 -11.81 -4.44 ...\n $ mode                        : int  1 0 1 1 1 1 1 0 1 1 ...\n $ speechiness                 : num  0.0338 0.025 0.0268 0.033 0.0301 0.0533 0.0896 0.0483 0 0.0605 ...\n $ acousticness                : num  0.0383 0.119 0.239 0.72 0.0151 0.18 0.0991 0.732 0.953 0.00938 ...\n $ instrumentalness            : num  3.17e-02 1.81e-06 2.75e-06 0.00 1.99e-04 0.00 0.00 7.65e-01 0.00 0.00 ...\n $ liveness                    : num  0.128 0.231 0.0617 0.067 0.0981 0.771 0.364 0.644 0.155 0.902 ...\n $ valence                     : num  0.931 0.365 0.846 0.221 0.324 0.297 0.353 0.624 0 0.493 ...\n $ tempo                       : num  136 105 113 146 131 ...\n $ track_id                    : chr  \"2PzU4IB8Dr6mxV3lHuaG34\" \"6NGOgLOBN38ybemGSxCN8k\" \"3FkP6u9dRgH1sJtlCoy7bB\" \"1sM65W7y0aDHq7DO0NXne0\" ...\n $ analysis_url                : chr  \"https://api.spotify.com/v1/audio-analysis/2PzU4IB8Dr6mxV3lHuaG34\" \"https://api.spotify.com/v1/audio-analysis/6NGOgLOBN38ybemGSxCN8k\" \"https://api.spotify.com/v1/audio-analysis/3FkP6u9dRgH1sJtlCoy7bB\" \"https://api.spotify.com/v1/audio-analysis/1sM65W7y0aDHq7DO0NXne0\" ...\n $ time_signature              : int  4 4 4 4 4 4 4 4 0 4 ...\n $ disc_number                 : int  1 1 1 1 1 1 5 1 2 1 ...\n $ duration_ms                 : int  222813 180226 176360 202440 146533 139093 42693 238133 10360 210826 ...\n $ explicit                    : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ track_href                  : chr  \"https://api.spotify.com/v1/tracks/2PzU4IB8Dr6mxV3lHuaG34\" \"https://api.spotify.com/v1/tracks/6NGOgLOBN38ybemGSxCN8k\" \"https://api.spotify.com/v1/tracks/3FkP6u9dRgH1sJtlCoy7bB\" \"https://api.spotify.com/v1/tracks/1sM65W7y0aDHq7DO0NXne0\" ...\n $ is_local                    : logi  FALSE FALSE FALSE FALSE FALSE FALSE ...\n $ track_name                  : chr  \"(I Can't Get No) Satisfaction - Mono Version\" \"(I Prithee) Do Not Ask for Love - Alternate Mix; 2006 Remaster\" \"(I'd Go The) Whole Wide World\" \"(I'll) Love Your Forever\" ...\n $ track_preview_url           : chr  NA \"https://p.scdn.co/mp3-preview/575aa5d5572ecc6314abc4016d95a5ecc6036a15?cid=452ff507950a47ffb134356d61ad54fd\" \"https://p.scdn.co/mp3-preview/a57c270edb78f28b765c2f80713c07272b2fe553?cid=452ff507950a47ffb134356d61ad54fd\" \"https://p.scdn.co/mp3-preview/7e0b01f309054395596121c87dcef1cfcec68bcf?cid=452ff507950a47ffb134356d61ad54fd\" ...\n $ track_number                : int  7 19 2 6 6 1 14 2 11 8 ...\n $ type                        : chr  \"track\" \"track\" \"track\" \"track\" ...\n $ track_uri                   : chr  \"spotify:track:2PzU4IB8Dr6mxV3lHuaG34\" \"spotify:track:6NGOgLOBN38ybemGSxCN8k\" \"spotify:track:3FkP6u9dRgH1sJtlCoy7bB\" \"spotify:track:1sM65W7y0aDHq7DO0NXne0\" ...\n $ external_urls.spotify       : chr  \"https://open.spotify.com/track/2PzU4IB8Dr6mxV3lHuaG34\" \"https://open.spotify.com/track/6NGOgLOBN38ybemGSxCN8k\" \"https://open.spotify.com/track/3FkP6u9dRgH1sJtlCoy7bB\" \"https://open.spotify.com/track/1sM65W7y0aDHq7DO0NXne0\" ...\n $ album_name                  : chr  \"Out Of Our Heads\" \"The Monkees (Deluxe Edition)\" \"Pool It!\" \"Pool It!\" ...\n $ key_name                    : chr  \"D\" \"F#\" \"G\" \"A\" ...\n $ mode_name                   : chr  \"major\" \"minor\" \"major\" \"major\" ...\n $ key_mode                    : chr  \"D major\" \"F# minor\" \"G major\" \"A major\" ...\n $ simplified_track_name       : chr  \"(I Can't Get No) Satisfaction\" \"(I Prithee) Do Not Ask for Love\" \"(I'd Go The) Whole Wide World\" \"(I'll) Love Your Forever\" ...\n\n\n\nstr(artist_overview_df)\n\nClasses 'tbl_df', 'tbl' and 'data.frame':   3 obs. of  5 variables:\n $ artist_name     : chr  \"The Beatles\" \"The Monkees\" \"The Rolling Stones\"\n $ Number_of_Songs : int  334 261 465\n $ Number_of_Albums: int  25 20 61\n $ Average_Energy  : num  0.505 0.563 0.76\n $ Average_Valence : num  0.668 0.619 0.618"
  },
  {
    "objectID": "index.html#review-of-the-extract-transform-e-t-process",
    "href": "index.html#review-of-the-extract-transform-e-t-process",
    "title": "CS 123 Teaching Demo",
    "section": "Review of the Extract-Transform (E-T) Process",
    "text": "Review of the Extract-Transform (E-T) Process\n\nHow did we get this data?\n\nOverview: We extracted data using the Spotify API and transformed it using various dplyr functions. Link to Extraction and Transformation Process. Additionally, here’s a reference to research presented at a conference of Extraction Transformation Visualization (ETV) a teaching data science technique.\nIllustration with Data:\nBind Rows: Combining all_tracks_df. See this section of the notes for more details.\nFilter Function: Filtering data in all_tracks_cleaned_df. Refer to this section of the notes for additional information.\nGroup By and Summarize: Demonstrating these processes with album_info_df and artist_overview_df. Further details can be found in this section of the notes."
  },
  {
    "objectID": "index.html#understanding-geoms",
    "href": "index.html#understanding-geoms",
    "title": "CS 123 Teaching Demo",
    "section": "1. Understanding Geoms",
    "text": "1. Understanding Geoms\nDefinition: Geoms (geometric objects) are the visual representations of data in ggplot2. Examples include points, lines, and bars.\nIllustration with Data:\n\nInvestigating Count Data - geom_bar\n\nWhich group had the most albums?\nType of Data: One or more categorical variables (e.g., “Artist”)\nWe’ll create a bar plot using geom_bar() with the artist_overview_df data frame to visualize the count of albums by each artist group.\n\n# Bar plot to show the number of albums per artist\nggplot(artist_overview_df, aes(x = artist_name, y = Number_of_Albums)) +\n  geom_bar(stat = 'identity') +\n  theme_minimal() +\n  labs(title = \"Number of Albums by Artist\",\n       x = \"Artist\",\n       y = \"Number of Albums\")\n\n\n\n\nThis visualization will help us see which artist group released the most albums.\n\n\n\n\nInvestigating the Distribution - geom_violin\n\nWhat were the energy levels of each group?\nType of Data: One categorical variable (Artist) and one numeric variable (Energy)\nUsing geom_violin() with the all_tracks_cleaned_df, we’ll create a violin plot to visualize the distribution of energy levels across different artist groups.\n\n# Violin plot to show the distribution of energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin() +\n  theme_minimal() +\n  labs(title = \"Distribution of Energy Levels by Artist\",\n       x = \"Artist\",\n       y = \"Energy Level\")\n\n\n\n\nA violin plot is chosen here because it not only shows the distribution but also the density of the data points, giving a clearer picture than a boxplot.\n\n\n\n\nInvestigating a Relationship - geom_point\n\nWhat is the relationship between energy levels and valence across groups?\nFirst, we’ll create a scatter plot using geom_point() with album_info_df to explore the relationship between energy levels and valence without specifying artists.\n\n# Scatter plot for energy levels vs valence\nggplot(album_info_df, aes(x = Energy, y = Valence)) +\n  geom_point() +\n  theme_minimal() +\n  labs(title = \"Relationship Between Energy Levels and Valence\",\n       x = \"Energy\",\n       y = \"Valence\")\n\n\n\n\nYou can investigate more geoms here.\n\n\n\nIn Class Practice\nTurn this into a question in which the student is asked to use color = artist_name ““” Next, we’ll add the artist specification to the plot for a more detailed analysis.\n\n# Scatter plot with artist specification\nggplot(album_info_df, aes(x = Energy, y = Valence, color = artist_name)) +\n  geom_point() +\n  theme_minimal() +\n  labs(title = \"Energy Levels vs Valence by Artist\",\n       x = \"Energy\",\n       y = \"Valence\")\n\n\n\n\nThis approach allows us to first observe the general trend and then delve deeper into how this relationship might differ across different artist groups. ““”"
  },
  {
    "objectID": "index.html#exploring-stats",
    "href": "index.html#exploring-stats",
    "title": "CS 123 Teaching Demo",
    "section": "2. Exploring Stats",
    "text": "2. Exploring Stats\n\nDefinition: In ggplot2, Stats (statistical transformations) are fundamental components that transform and summarize data.\nThese transformations include basic tasks like counting occurrences, to more complex operations like calculating means or medians, making them crucial for data analysis and interpretation.\nIllustration with Data:\nWe will use stat_summary() in conjunction with geom_violin() to enhance our violin plot. By applying stat_summary(), we can overlay summary statistics, such as mean or median, on the violin plot created from all_tracks_cleaned_df.\nThis approach not only visualizes the distribution of energy levels across different artist groups but also marks key statistical indicators for more insightful data interpretation.\n\n\n# Enhanced Violin plot with summary statistics for energy levels per artist\nggplot(all_tracks_cleaned_df, aes(x = artist_name, y = energy, fill = artist_name)) +\n  geom_violin() +\n  stat_summary(fun = mean, geom = \"point\", shape = 20, size = 3, color = \"black\") +\n  theme_minimal() +\n  labs(title = \"Distribution of Energy Levels by Artist with Statistical Summary\",\n       x = \"Artist\",\n       y = \"Energy Level\")\n\n\n\n\n\nIn this code snippet, stat_summary() is used to plot the mean energy levels as points on the violin plot.\nThe mean function calculates the average energy level for each artist, and the resulting point is plotted on top of the corresponding violin plot.\nThis enhancement provides a clear visual indicator of the central tendency of the energy distribution for each artist, adding depth to our data analysis.\n\n\nIn Class Practice\nThis one should Include Add the Frequency on top of each bar geom bar"
  },
  {
    "objectID": "index.html#guide-legends-and-annotations",
    "href": "index.html#guide-legends-and-annotations",
    "title": "CS 123 Teaching Demo",
    "section": "3. Guide: Legends and Annotations",
    "text": "3. Guide: Legends and Annotations\n\nDefinition: In ggplot2, guides are critical elements that enhance the interpretability of a plot. They include legends, axes labels, titles, and other annotations, serving as navigational tools that provide context and improve readability.\nGuides help in making the plots self-explanatory by clearly indicating what each visual element represents.\nIllustration with Data:\nTo demonstrate the importance of guides, we will enhance a scatter plot created from album_info_df.\nWe’ll focus on customizing the legend and adding meaningful axes labels and a descriptive title.\nThis will help viewers quickly understand the relationship between energy levels and valence in the dataset.\n\n\n# Enhanced scatter plot with customized guides\nggplot(album_info_df, aes(x = Energy, y = Valence, color = artist_name)) +\ngeom_point() +\nscale_color_manual(values = c(\"blue\", \"red\", \"green\")) +\nlabs(title = \"Relationship Between Energy Levels and Valence by Artist\",\nsubtitle = \"Visualizing data from 'album_info_df'\",\nx = \"Energy\",\ny = \"Valence\",\ncolor = \"Artist Group\") +\ntheme(legend.position = \"bottom\")\n\n\n\n\nIn this code snippet:\n\naes(color = artist_name) is used to differentiate data points by artist, adding a color legend to the plot.\nscale_color_manual() allows us to manually specify the colors used in the plot, enhancing visual appeal and clarity.\nThe labs() function is used to add a title, subtitle, and custom labels for axes and the legend, providing context to the plot.\ntheme(legend.position = \"bottom\") adjusts the legend’s position for better layout and readability.\nThis enhanced section provides an in-depth understanding of the role of guides in ggplot2 and illustrates their application with a practical example.\nBy customizing legends and annotations, we can significantly improve the effectiveness of our data visualizations, making them more informative and accessible to the audience.\n\n\nIn Class Practice"
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "CS 123 Teaching Demo",
    "section": "Conclusion",
    "text": "Conclusion\nToday’s exploration of the ggplot2 package in R has taken us through the intricacies of Geoms, Stats, and Guides. We’ve utilized all_tracks_cleaned_df, album_info_df, and artist_overview_df to demonstrate the creation of compelling visualizations, from basic bar charts to insightful violin and scatter plots.\n\nGeoms showed the diverse ways data can be visually represented.\nStats added a layer of depth by integrating statistical summaries.\nGuides enhanced our plots with clear legends and annotations, making them informative and accessible.\n\nThis session aimed to not only broaden your understanding of ggplot2 but also to inspire its application in your data storytelling endeavors. Thank you for your engagement, and I encourage you to continue exploring the vast potential of data visualization.\n\nQuestion 1: Geoms\nPrompt: Using the mtcars dataset, create a ggplot2 scatter plot (geom_point) to visualize the relationship between mpg (miles per gallon) and hp (horsepower). Assign your plot to the variable p1.\n\n\n\n\n\nSolution:\n\np1 &lt;- ggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point()\n\ngradethis Code:\n\n# grade_this_code()(\n#   pass_if(~ identical(.result, p1),\n#           \"Excellent work! Your scatter plot correctly visualizes the relationship between mpg and hp.\"),\n#   fail_if(~ !inherits(.result, \"ggplot\"),\n#           \"Make sure you are using ggplot2 for plotting.\"),\n#   fail(\"Your plot does not match the expected output. Check your aes() mappings.\")\n# )\n\n\n\n\nQuestion 2: stat_summary\nPrompt: Create a ggplot2 visualization using the mtcars dataset that displays the average mpg for each cylinder group (cyl). Use geom_bar() and stat_summary() to achieve this. Store your plot in the variable p2.\n\n\n\n\n\nSolution:\n\np2 &lt;- ggplot(mtcars, aes(x = factor(cyl))) +\n  geom_bar(stat = \"summary\", fun = mean)\n\ngradethis Code:\n\n# grade_this_code()(\n#   pass_if(~ identical(.result, p2),\n#           \"Well done! Your plot correctly shows the average mpg for each cylinder group.\"),\n#   fail_if(~ !(\"summary\" %in% sapply(.result$layers, function(x) x$stat)),\n#           \"Remember to use stat='summary' in geom_bar.\"),\n#   fail(\"Your plot doesn't seem to be correct. Ensure you're using the mean function for stat_summary.\")\n# )\n\n\n\nQuestion 3: Labels\n\n\n\n\n\nPrompt: Using the mtcars dataset, create a ggplot2 scatter plot of mpg vs wt (weight). Add labels for the x-axis (“Miles per Gallon”), y-axis (“Weight (1000 lbs)”), and the plot title (“MPG vs Weight”). Save this plot as p3.\nSolution:\n\np3 &lt;- ggplot(mtcars, aes(x = mpg, y = wt)) +\n  geom_point() +\n  labs(title = \"MPG vs Weight\", x = \"Miles per Gallon\", y = \"Weight (1000 lbs)\")\n\ngradethis Code:\n\n# grade_this_code()(\n#   pass_if(~ identical(.result, p3),\n#           \"Great job! Your labels are correctly added to the scatter plot.\"),\n#   fail_if(~ any(c(\"Miles per Gallon\", \"Weight (1000 lbs)\", \"MPG vs Weight\") %in% c(.result$labels$title, .result$labels$x, .result$labels$y)),\n#           \"Check if you've added all the required labels correctly.\"),\n#   fail(\"There seems to be an issue with your plot. Review the labels and try again.\")\n# )"
  },
  {
    "objectID": "index.html#lets-visualize",
    "href": "index.html#lets-visualize",
    "title": "CS 123 Teaching Demo",
    "section": "0. Lets Visualize",
    "text": "0. Lets Visualize\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\n\n\nThe ggplot2 package in R is a powerful and flexible system for creating data visualizations.\nBuilt upon the principles of the Grammar of Graphics, it allows users to construct plots by layering components systematically.\nggplot2 is renowned for its ability to handle complex visualization tasks with ease, offering a wide range of plot types and customization options."
  },
  {
    "objectID": "index.html#conclusion-1",
    "href": "index.html#conclusion-1",
    "title": "CS 123 Teaching Demo",
    "section": "Conclusion",
    "text": "Conclusion\nToday’s exploration of the ggplot2 package in R has taken us through the intricacies of Geoms, Stats, and Guides. We’ve utilized all_tracks_cleaned_df, album_info_df, and artist_overview_df to demonstrate the creation of compelling visualizations, from basic bar charts to insightful violin and scatter plots.\n\nGeoms showed the diverse ways data can be visually represented.\nStats added a layer of depth by integrating statistical summaries.\nGuides enhanced our plots with clear legends and annotations, making them informative and accessible.\n\nThis session aimed to not only broaden your understanding of ggplot2 but also to inspire its application in your data storytelling endeavors. Thank you for your engagement, and I encourage you to continue exploring the vast potential of data visualization."
  },
  {
    "objectID": "shiny_within_quarto.html",
    "href": "shiny_within_quarto.html",
    "title": "Old Faithful",
    "section": "",
    "text": "Number of bins:"
  }
]