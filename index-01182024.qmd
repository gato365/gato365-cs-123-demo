---
title: "Initial Principles of Data Visualizations"
---

## Let's analyze these group's albums

<img src="images/music_groups.jpg" alt="alt text" width="375" height="425"/>

```{r setup }
#| include: false

```


## Review of the Extract & Transform 

::: {.callout-note collapse="true"}

## Get & Clean

[ETV](https://www.causeweb.org/usproc/eusr/2022/virtual-posters/9) 

### **How did we get this data?**


#### **Extraction of Data:**

We extracted data using the Spotify API and transformed it using various dplyr functions. [Review Extraction and Transformation Process](extract_transform.html). 

### **How did we clean this data?**

#### **Transformation of Data:**

-   `Bind Rows`: Combining `all_tracks_df`. [See this section of the notes for more details](extract_transform.html).

-   `Filter Function`: Filtering data in `all_tracks_cleaned_df`. [Refer to this section of the notes for additional information](extract_transform.html).

-   `Group By and Summarize`: Demonstrating these processes with `album_info_df` and `artist_overview_df`. [Further details can be found in this section of the notes](extract_transform.html).

<br>

## Let's load the data

```{r}
# Load the data from the R data file
load("music_data.rda")
```



```{r}
str(album_info_df)
```



:::


























## Introduction to the package `ggplot2`
::: {.callout-note collapse="true"}

## `ggplot2`

In this module, we will explore how to create visualizations using the `ggplot2` package in R.

We'll focus on understanding:

-   geoms: the different types of geometric objects

-   Summary Statistics: The stat_summary function can calculate summary statistics (like mean, median, min, max, etc.) for each group of data

-   Guides: the importance of labels and titles in making plots informative.
:::

















## 0. Lets visualize using ggplot
::: {.callout-note collapse="true"}
## The power of `ggplot2`

-   The ggplot2 package in R is a powerful and **flexible system for creating data visualizations**.

-   Built upon the principles of the **Grammar of Graphics**, it allows users to construct plots by layering components systematically.

-   ggplot2 is renowned for its ability to handle complex visualization tasks, offering a **wide range of plot types and customization options**.

```{r}
#| message: false
#| warning: false

library(ggplot2)
```

```{r}
#| fig-align: center
ggplot(data = album_info_df)
```

**Now that we have the data**, ... 

We must specify the variable(s) that we are interested to create a visualization.



:::



















## 1. **geoms**
::: {.callout-note collapse="true"}

## Importance of Variables


## **But wait ... we have to understand**

## Variables

Typically, I determine:

1.  What your question?

2.  How many variables are in your question?

3.  What are the variable types? Strings or numeric.

Based on this information we can then determine how we can represent that information in a visualization.

## geoms in ggplot2

**Definition**: geoms (geometric objects) are the visual representations of data in ggplot2. Examples include points, lines, and bars.

Depending on the type of data and the story we want to tell, we choose different geoms.




::: {.callout-note collapse="true"}
### Investigating Count Data - geom_bar



1.  What your question?

<span style="color:green;"><b>Which group had the most albums?</b></span>


2.  How many variables are in your question?

<span style="color:green;"><b>2</b></span>

3.  What are the variable types? Strings or numeric.


<span style="color:green;"><b>**Type of Data**: One or more variables that are strings (e.g., "Artist")</b></span>

<span style="color:red;"><b>Fill out the code as I explain each element of the code</b></span>

::: {.custom-class collapse="true"}

```{r}

# Bar plot to show the number of albums per artist
ggplot(data = album_counts_df, 
       mapping = aes(
           x = reorder(artist_name, -album_count), 
           y = album_count
           )
       ) +
    geom_bar(stat = "identity")

```


#### Sooo... *Which group had the most albums?* 
:::





:::

::: {.callout-note collapse="true"}
### Investigating Numeric Data - geom_boxplot



1.  What your question?


<span style="color:green;"><b>What were the energy levels of each group's albums?</b></span>


2.  How many variables are in your question?

<span style="color:green;"><b>2</b></span>

3.  What are the variable types? Strings or numeric.

<span style="color:green;"><b>Type of Data: One string variable (Artist) and one numeric variable (Energy)</b></span>




<span style="color:red;"><b>Fill out the code as I explain each element of the code</b></span>

::: {.custom-class collapse="true"}
## Code and Visualization

```{r}
# Box plot to show the distribution of energy levels per artist
ggplot(data = album_info_df, 
       mapping = aes(
         x = artist_name, 
         y = energy, 
         fill = artist_name
         )
       ) +
  geom_boxplot() 
```


#### Sooo... *What were the energy levels of each group's albums?* 


:::

This visualization will help us see the median, IQR, and skewness of numeric data.

- talk about limitation to boxplot, you can add relatve sample size 

- ask students to look up violin plot

- their ability to look up help page

- what did you learn from these visualizations

- specify what energy is measured and it was aggregated by album






You can investigate more geoms [here](https://ggplot2.tidyverse.org/reference/).
:::

::: {.callout-note collapse="true"}
# Questions



## Question 1:

Convert a boxplot to a violin plot using the `geom_violin()` function. \[Code\]

```{r}
ggplot(data = album_info_df, 
       mapping = aes(
         x = artist_name, 
         y = energy, 
         fill = artist_name
         )
       ) +
  geom_violin()
```



Follow up Question: What do you notice about the violin plot compared to the boxplot? 


:::
:::











## 2. Stats within ggplot
::: {.callout-note collapse="true"}


-   **Definition**: In ggplot2, stats are key elements that help summarize and represent data. They allow us to visualize the central tendency or the most typical value in the data.


::: {.custom-class collapse="true"}

# Code and Visualization

```{r}
# Enhanced Violin plot with summary statistics for energy levels per artist

ggplot(data = album_info_df, 
       mapping = aes(
         x = artist_name, 
         y = energy, 
         fill = artist_name
         )
       ) +
  geom_violin() +
  stat_summary(
    fun = mean
    )
```


- adding appropriate labels and titles can answer the research question which will tell


:::

::: {.callout-note collapse="true"}
# Questions

## Question 2: Adding Summary Statistics to Geoms

a.  Complete the code to overlay text on the bars using geom_text(). Use the `help()` function to learn more about the geom_text() function. 




```{r}
ggplot(data = album_counts_df, 
       mapping = aes(
           x = reorder(artist_name, -album_count), 
           y = album_count
       )) +
    geom_bar(stat = "identity") +
    geom_text(mapping = aes(
      label = album_count), 
              vjust = -0.5,  # Adjust text just above the bars
              size = 3.5)    # Set text size
```



b.  How many albums do The Monkees have? \[Numeric\]


:::

:::

::: {.callout-note collapse="true"}
# 3. Guide: Legends and Annotations

-   **Definition**: In ggplot2, guides are critical elements that enhance the interpretability of a plot. They include: 

- legends
- axes labels
- titles 
- other annotations

These serve as navigational tools that provide context and improve readability.

Lets go back to the violin plot we created earlier and add some labels and titles to make it more informative.

::: {.custom-class collapse="true"}
## Code and Visualization

```{r}
# Example code for adding labels to a plot
ggplot(data = album_info_df, 
       mapping = aes(
         x = artist_name, 
         y = energy, 
         fill = artist_name
       )
) +
  geom_violin() +
  stat_summary(fun = mean) +
  labs(
    title = "Energy Levels by Artist",
    subtitle = "Comparison using violin plots with mean energy levels",
    x = "Artist Name",
    y = "Energy Level",
    fill = "Artist Group"
  )

```
:::

::: {.callout-note collapse="true"}
# Questions

### Question 3: Enhancing Plots with Labels

Create a scatter plot using `geom_point` to explore the relationship between `energy` and `valence` of albums. Edit the code to include a title, axis labels, and a color legend that are appropriate for the data being visualized. Specifically, set the title to 'Energy vs Valence: Exploring Album Characteristics', the subtitle to 'A scatter plot illustrating the relationship between energy and valence in albums', the x-axis label to 'Energy', and the y-axis label to 'Valence'.

```{r}
# Your code to add labels to a scatter plot goes here
ggplot(data = album_info_df , 
       mapping = aes(
         x = energy, 
         y = valence
         )
       ) +
  geom_point() +
  labs(
    title = "Energy vs Valence: Exploring Album Characteristics",
    subtitle = "A scatter plot illustrating the relationship between energy and valence in albums",
    x = "Energy",
    y = "Valence"
  )

```



Go back and add labels (title, subtitle, x-axis label, y-axis label) to all the plots you created in this module. How does this change the way you interpret the plots? 




:::
:::

::: {.callout-note collapse="true"}
# Conclusion

Today's exploration of the ggplot2 package in R has taken us through the intricacies of Geoms, Stats, and Guides. We've utilized `all_tracks_cleaned_df`, `album_info_df`, and `artist_overview_df` to demonstrate the creation of compelling visualizations, from basic bar charts to insightful violin and scatter plots.

-   **geoms** showed the diverse ways data can be visually represented.

-   **Stats** added a layer of depth by integrating statistical summaries.

-   **Guides** enhanced our plots with clear legends and annotations, making them informative and accessible.
:::
